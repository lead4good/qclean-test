<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuantConnect.AlgorithmFactory</name>
    </assembly>
    <members>
        <member name="T:QuantConnect.AlgorithmFactory.Loader">
             <summary>
             Loader creates and manages the memory and exception space of the algorithm, ensuring if it explodes the Lean Engine is intact.
             </summary>
            </member>
        <member name="F:QuantConnect.AlgorithmFactory.Loader.appDomain">
             <summary>
             Memory space of the user algorithm
             </summary>
            </member>
        <member name="F:QuantConnect.AlgorithmFactory.Loader.AlgorithmInterfaceType">
             <summary>
             The algorithm's interface type that we'll be trying to load
             </summary>
            </member>
        <member name="F:QuantConnect.AlgorithmFactory.Loader.AlgorithmBaseTypeFullName">
             <summary>
             The full type name of QCAlgorithm, this is so we don't pick him up when querying for types
             </summary>
            </member>
        <member name="M:QuantConnect.AlgorithmFactory.Loader.#ctor">
             <summary>
             Creates a new loader with a 10 second maximum load time that forces exactly one derived type to be found
             </summary>
            </member>
        <member name="M:QuantConnect.AlgorithmFactory.Loader.#ctor(QuantConnect.Language,System.TimeSpan,System.Func{System.Collections.Generic.List{System.String},System.String})">
             <summary>
             Creates a new loader with the specified configuration
             </summary>
             <param name="language">Which language are we trying to load</param>
             <param name="loaderTimeLimit">
             Used to limit how long it takes to create a new instance
             </param>
             <param name="multipleTypeNameResolverFunction">
             Used to resolve multiple type names found in assembly to a single type name, if null, defaults to names =&gt; names.SingleOrDefault()
             
             When we search an assembly for derived types of IAlgorithm, sometimes the assembly will contain multiple matching types. This is the case
             for the QuantConnect.Algorithm assembly in this solution.  In order to pick the correct type, consumers must specify how to pick the type,
             that's what this function does, it picks the correct type from the list of types found within the assembly.
             </param>
            </member>
        <member name="M:QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(System.String,QuantConnect.Interfaces.IAlgorithm@,System.String@)">
             <summary>
             Creates a new instance of the specified class in the library, safely.
             </summary>
             <param name="assemblyPath">Location of the DLL</param>
             <param name="algorithmInstance">Output algorithm instance</param>
             <param name="errorMessage">Output error message on failure</param>
             <returns>Bool true on successfully loading the class.</returns>        
            </member>
        <member name="M:QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(System.String,QuantConnect.Interfaces.IAlgorithm@,System.String@)">
             <summary>
             Create a new instance of a python algorithm
             </summary>
             <param name="assemblyPath"></param>
             <param name="algorithmInstance"></param>
             <param name="errorMessage"></param>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(System.String,QuantConnect.Interfaces.IAlgorithm@,System.String@)">
             <summary>
             Create a generic IL algorithm 
             </summary>
             <param name="assemblyPath"></param>
             <param name="algorithmInstance"></param>
             <param name="errorMessage"></param>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)">
             <summary>
             Get a list of all the matching type names in this DLL assembly:
             </summary>
             <param name="assembly">Assembly dll we're loading.</param>
             <returns>String list of types available.</returns>
            </member>
        <member name="M:QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(System.String,QuantConnect.Interfaces.IAlgorithm@,System.String@)">
             <summary>
             Creates a new instance of the class in the library, safely.
             </summary>
             <param name="assemblyPath">Location of the DLL</param>
             <param name="algorithmInstance">Output algorithm instance</param>
             <param name="errorMessage">Output error message on failure</param>
             <returns>bool success</returns>     
            </member>
        <member name="M:QuantConnect.AlgorithmFactory.Loader.Unload">
             <summary>
             Unload this factory's appDomain.
             </summary>
             <remarks>Not used in lean engine. Running the library in an app domain is 10x slower.</remarks>
             <seealso cref="!:CreateAppDomain" />
            </member>
    </members>
</doc>
