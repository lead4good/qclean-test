<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuantConnect.Queues</name>
    </assembly>
    <members>
        <member name="T:QuantConnect.Queues.EmptyCommandQueueHandler">
             <summary>
             Provides an implementation of <see cref="T:QuantConnect.Interfaces.ICommandQueueHandler" /> that never
             returns a command. This is useful for local console backtesting when we don't
             really want to issue commands
             </summary>
            </member>
        <member name="M:QuantConnect.Queues.EmptyCommandQueueHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket,QuantConnect.Interfaces.IAlgorithm)">
             <summary>
             NOP
             </summary>
             <param name="job">unused</param>
             <param name="algorithm">The algorithm instance</param>
            </member>
        <member name="M:QuantConnect.Queues.EmptyCommandQueueHandler.GetCommands">
             <summary>
             Return empty enumerable.
             </summary>
             <returns>null</returns>
            </member>
        <member name="M:QuantConnect.Queues.EmptyCommandQueueHandler.Dispose">
             <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             </summary>
             <filterpriority>2</filterpriority>
            </member>
        <member name="T:QuantConnect.Queues.FileCommandQueueHandler">
             <summary>
             Represents a command queue handler that sources it's commands from
             a file on the local disk
             </summary>
            </member>
        <member name="M:QuantConnect.Queues.FileCommandQueueHandler.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Queues.FileCommandQueueHandler" /> class
             using the 'command-json-file' configuration value for the command json file
             </summary>
            </member>
        <member name="M:QuantConnect.Queues.FileCommandQueueHandler.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Queues.FileCommandQueueHandler" /> class
             </summary>
             <param name="commandJsonFilePath">The file path to the commands json file</param>
            </member>
        <member name="M:QuantConnect.Queues.FileCommandQueueHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket,QuantConnect.Interfaces.IAlgorithm)">
             <summary>
             Initializes this command queue for the specified job
             </summary>
             <param name="job">The job that defines what queue to bind to</param>
             <param name="algorithm">The algorithm instance</param>
            </member>
        <member name="M:QuantConnect.Queues.FileCommandQueueHandler.GetCommands">
             <summary>
             Gets the next command in the queue
             </summary>
             <returns>The next command in the queue, if present, null if no commands present</returns>
            </member>
        <member name="M:QuantConnect.Queues.FileCommandQueueHandler.ReadCommandFile">
             <summary>
             Reads the commnd file on disk and populates the queue with the commands
             </summary>
            </member>
        <member name="M:QuantConnect.Queues.FileCommandQueueHandler.Dispose">
             <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             </summary>
             <filterpriority>2</filterpriority>
            </member>
        <member name="T:QuantConnect.Queues.JobQueue">
             <summary>
             Implementation of local/desktop job request:
             </summary>
            </member>
        <member name="P:QuantConnect.Queues.JobQueue.AlgorithmLocation">
             <summary>
             Physical location of Algorithm DLL.
             </summary>
            </member>
        <member name="M:QuantConnect.Queues.JobQueue.Initialize">
             <summary>
             Initialize the job queue:
             </summary>
            </member>
        <member name="M:QuantConnect.Queues.JobQueue.NextJob(System.String@)">
             <summary>
             Desktop/Local Get Next Task - Get task from the Algorithm folder of VS Solution.
             </summary>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.Queues.JobQueue.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)">
             <summary>
             Desktop/Local acknowledge the task processed. Nothing to do.
             </summary>
             <param name="job"></param>
            </member>
    </members>
</doc>
