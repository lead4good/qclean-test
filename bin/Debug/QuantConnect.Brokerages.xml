<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuantConnect.Brokerages</name>
    </assembly>
    <members>
        <member name="T:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage">
             <summary>
             Represents a brokerage to be used during backtesting. This is intended to be only be used with the BacktestingTransactionHandler
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.#ctor(QuantConnect.Interfaces.IAlgorithm)">
             <summary>
             Creates a new BacktestingBrokerage for the specified algorithm
             </summary>
             <param name="algorithm">The algorithm instance</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.#ctor(QuantConnect.Interfaces.IAlgorithm,System.String)">
             <summary>
             Creates a new BacktestingBrokerage for the specified algorithm
             </summary>
             <param name="algorithm">The algorithm instance</param>
             <param name="name">The name of the brokerage</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.#ctor(QuantConnect.Interfaces.IAlgorithm,QuantConnect.Brokerages.Backtesting.IBacktestingMarketSimulation)">
             <summary>
             Creates a new BacktestingBrokerage for the specified algorithm. Adds market simulation to BacktestingBrokerage;
             </summary>
             <param name="algorithm">The algorithm instance</param>
            </member>
        <member name="P:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.IsConnected">
             <summary>
             Gets the connection status
             </summary>
             <remarks>
             The BacktestingBrokerage is always connected
             </remarks>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetOpenOrders">
             <summary>
             Gets all open orders on the account
             </summary>
             <returns>The open orders returned from IB</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetAccountHoldings">
             <summary>
             Gets all holdings for the account
             </summary>
             <returns>The current holdings from the account</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetCashBalance">
             <summary>
             Gets the current cash balance for each currency held in the brokerage account
             </summary>
             <returns>The current cash balance for each currency available for trading</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)">
             <summary>
             Places a new order and assigns a new broker ID to the order
             </summary>
             <param name="order">The order to be placed</param>
             <returns>True if the request for a new order has been placed, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)">
             <summary>
             Updates the order with the same ID
             </summary>
             <param name="order">The new order information</param>
             <returns>True if the request was made for the order to be updated, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)">
             <summary>
             Cancels the order with the specified ID
             </summary>
             <param name="order">The order to cancel</param>
             <returns>True if the request was made for the order to be canceled, false otherwise</returns>
            </member>
        <member name="P:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.MarketSimulation">
             <summary>
             Market Simulation - simulates various market conditions in backtest
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan">
             <summary>
             Scans all the outstanding orders and applies the algorithm model fills to generate the order events
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.SimulateMarket">
             <summary>
             Runs market simulation 
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.ActivateOptionAssignment(QuantConnect.Securities.Option.Option,System.Int32)">
             <summary>
             This method is called by market simulator in order to launch an assignment event
             </summary>
             <param name="option">Option security to assign</param>
             <param name="quantity">Quantity to assign</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Connect">
             <summary>
             The BacktestingBrokerage is always connected. This is a no-op.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Disconnect">
             <summary>
             The BacktestingBrokerage is always connected. This is a no-op.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.SetPendingOrder(QuantConnect.Orders.Order)">
             <summary>
             Sets the pending order as a clone to prevent object reference nastiness
             </summary>
             <param name="order">The order to be added to the pending orders dictionary</param>
             <returns></returns>
            </member>
        <member name="T:QuantConnect.Brokerages.Backtesting.BacktestingBrokerageFactory">
             <summary>
             Factory type for the <see cref="T:QuantConnect.Brokerages.Backtesting.BacktestingBrokerage" />
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Backtesting.BacktestingBrokerageFactory.BrokerageData">
             <summary>
             Gets the brokerage data required to run the IB brokerage from configuration
             </summary>
             <remarks>
             The implementation of this property will create the brokerage data dictionary required for
             running live jobs. See <see cref="M:QuantConnect.Interfaces.IJobQueueHandler.NextJob(System.String@)" />
             </remarks>
            </member>
        <member name="P:QuantConnect.Brokerages.Backtesting.BacktestingBrokerageFactory.BrokerageModel">
             <summary>
             Gets a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokersBrokerageModel" />
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerageFactory.CreateBrokerage(QuantConnect.Packets.LiveNodePacket,QuantConnect.Interfaces.IAlgorithm)">
             <summary>
             Creates a new IBrokerage instance
             </summary>
             <param name="job">The job packet to create the brokerage for</param>
             <param name="algorithm">The algorithm instance</param>
             <returns>A new brokerage instance</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerageFactory.Dispose">
             <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             </summary>
             <filterpriority>2</filterpriority>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BacktestingBrokerageFactory.#ctor">
             <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.Backtesting.BacktestingBrokerageFactory" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Backtesting.BasicOptionAssignmentSimulation">
             <summary>
             This market conditions simulator emulates exercising of short option positions in the portfolio.
             Simulator implements basic no-arb argument: when time value of the option contract is close to zero 
             it assigns short legs getting profit close to expiration dates in deep ITM positions. User algorithm then receives 
             assignment event from LEAN. Simulator randomly scans for arbitrage opportunities every two hours or so.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BasicOptionAssignmentSimulation.IsReadyToSimulate(QuantConnect.Interfaces.IAlgorithm)">
             <summary>
             We generate a list of time points when we would like to run our simulation. we then return true if the time is in the list. 
             </summary>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.BasicOptionAssignmentSimulation.SimulateMarketConditions(QuantConnect.Interfaces.IBrokerage,QuantConnect.Interfaces.IAlgorithm)">
             <summary>
             We simulate activity of market makers on expiration. Trying to get profit close to expiration dates in deep ITM positions.
             This version of the simulator exercises short positions in full. 
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Backtesting.IBacktestingMarketSimulation">
             <summary>
             Backtesting Market Simulation interface, that must be implemented by all simulators of market conditions run during backtest
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Backtesting.IBacktestingMarketSimulation.SimulateMarketConditions(QuantConnect.Interfaces.IBrokerage,QuantConnect.Interfaces.IAlgorithm)">
             <summary>
             Method is called by backtesting brokerage to simulate market conditions. 
             </summary>
             <param name="brokerage">Backtesting brokerage instance</param>
             <param name="algorithm">Algorithm instance</param>
            </member>
        <member name="T:QuantConnect.Brokerages.Brokerage">
             <summary>
             Represents the base Brokerage implementation. This provides logging on brokerage events.
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.Brokerage.OrderStatusChanged">
             <summary>
             Event that fires each time an order is filled
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.Brokerage.OptionPositionAssigned">
             <summary>
             Event that fires each time a short option position is assigned
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.Brokerage.AccountChanged">
             <summary>
             Event that fires each time a user's brokerage account is changed
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.Brokerage.Message">
             <summary>
             Event that fires when an error is encountered in the brokerage
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Brokerage.Name">
             <summary>
             Gets the name of the brokerage
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Brokerage.IsConnected">
             <summary>
             Returns true if we're currently connected to the broker
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Brokerage.#ctor(System.String)">
             <summary>
             Creates a new Brokerage instance with the specified name
             </summary>
             <param name="name">The name of the brokerage</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Brokerage.PlaceOrder(QuantConnect.Orders.Order)">
             <summary>
             Places a new order and assigns a new broker ID to the order
             </summary>
             <param name="order">The order to be placed</param>
             <returns>True if the request for a new order has been placed, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Brokerage.UpdateOrder(QuantConnect.Orders.Order)">
             <summary>
             Updates the order with the same id
             </summary>
             <param name="order">The new order information</param>
             <returns>True if the request was made for the order to be updated, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Brokerage.CancelOrder(QuantConnect.Orders.Order)">
             <summary>
             Cancels the order with the specified ID
             </summary>
             <param name="order">The order to cancel</param>
             <returns>True if the request was made for the order to be canceled, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Brokerage.Connect">
             <summary>
             Connects the client to the broker's remote servers
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Brokerage.Disconnect">
             <summary>
             Disconnects the client from the broker's remote servers
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Brokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)">
             <summary>
             Event invocator for the OrderFilled event
             </summary>
             <param name="e">The OrderEvent</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Brokerage.OnOptionPositionAssigned(QuantConnect.Orders.OrderEvent)">
             <summary>
             Event invocator for the OptionPositionAssigned event
             </summary>
             <param name="e">The OrderEvent</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Brokerage.OnAccountChanged(QuantConnect.Securities.AccountEvent)">
             <summary>
             Event invocator for the AccountChanged event
             </summary>
             <param name="e">The AccountEvent</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Brokerage.OnMessage(QuantConnect.Brokerages.BrokerageMessageEvent)">
             <summary>
             Event invocator for the Message event
             </summary>
             <param name="e">The error</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Brokerage.GetOpenOrders">
             <summary>
             Gets all open orders on the account. 
             NOTE: The order objects returned do not have QC order IDs.
             </summary>
             <returns>The open orders returned from IB</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Brokerage.GetAccountHoldings">
             <summary>
             Gets all holdings for the account
             </summary>
             <returns>The current holdings from the account</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Brokerage.GetCashBalance">
             <summary>
             Gets the current cash balance for each currency held in the brokerage account
             </summary>
             <returns>The current cash balance for each currency available for trading</returns>
            </member>
        <member name="P:QuantConnect.Brokerages.Brokerage.AccountInstantlyUpdated">
             <summary>
             Specifies whether the brokerage will instantly update account balances
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.BrokerageException">
             <summary>
             Represents an error retuned from a broker's server
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.BrokerageException.#ctor(System.String)">
             <summary>
             Creates a new BrokerageException with the specified message.
             </summary>
             <param name="message">The error message that explains the reason for the exception.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.BrokerageException.#ctor(System.String,System.Exception)">
             <summary>
             Creates a new BrokerageException with the specified message.
             </summary>
             <param name="message">The error message that explains the reason for the exception.</param>
             <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
            </member>
        <member name="T:QuantConnect.Brokerages.BrokerageFactory">
             <summary>
             Provides a base implementation of IBrokerageFactory that provides a helper for reading data from a job's brokerage data dictionary
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.BrokerageFactory.Dispose">
             <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             </summary>
             <filterpriority>2</filterpriority>
            </member>
        <member name="P:QuantConnect.Brokerages.BrokerageFactory.BrokerageType">
             <summary>
             Gets the type of brokerage produced by this factory
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.BrokerageFactory.BrokerageData">
             <summary>
             Gets the brokerage data required to run the brokerage from configuration/disk
             </summary>
             <remarks>
             The implementation of this property will create the brokerage data dictionary required for
             running live jobs. See <see cref="M:QuantConnect.Interfaces.IJobQueueHandler.NextJob(System.String@)" />
             </remarks>
            </member>
        <member name="P:QuantConnect.Brokerages.BrokerageFactory.BrokerageModel">
             <summary>
             Gets a brokerage model that can be used to model this brokerage's unique
             behaviors
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.BrokerageFactory.CreateBrokerage(QuantConnect.Packets.LiveNodePacket,QuantConnect.Interfaces.IAlgorithm)">
             <summary>
             Creates a new IBrokerage instance
             </summary>
             <param name="job">The job packet to create the brokerage for</param>
             <param name="algorithm">The algorithm instance</param>
             <returns>A new brokerage instance</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.BrokerageFactory.CreateBrokerageMessageHandler(QuantConnect.Interfaces.IAlgorithm,QuantConnect.Packets.AlgorithmNodePacket,QuantConnect.Interfaces.IApi)">
             <summary>
             Gets a brokerage message handler
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.BrokerageFactory.#ctor(System.Type)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.BrokerageFactory" /> class for the specified <paramref name="brokerageType" />
             </summary>
             <param name="brokerageType">The type of brokerage created by this factory</param>
            </member>
        <member name="M:QuantConnect.Brokerages.BrokerageFactory.Read``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String,System.Collections.Generic.ICollection{System.String})">
             <summary>
             Reads a value from the brokerage data, adding an error if the key is not found
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Fxcm.FxcmBrokerage">
             <summary>
             FXCM brokerage - implementation of IBrokerage interface
             </summary>
             <summary>
             FXCM brokerage - implementation of IHistoryProvider interface
             </summary>
             <summary>
             FXCM brokerage - implementation of IDataQueueHandler interface
             </summary>
             <summary>
             FXCM brokerage - Java API related functions and interface implementations
             </summary>
             <summary>
             FXCM brokerage - private helper functions
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.#ctor(QuantConnect.Securities.IOrderProvider,QuantConnect.Securities.ISecurityProvider,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Creates a new instance of the <see cref="T:QuantConnect.Brokerages.Fxcm.FxcmBrokerage" /> class
             </summary>
             <param name="orderProvider">The order provider</param>
             <param name="securityProvider">The holdings provider</param>
             <param name="server">The url of the server</param>
             <param name="terminal">The terminal name</param>
             <param name="userName">The user name (login id)</param>
             <param name="password">The user password</param>
             <param name="accountId">The account id</param>
            </member>
        <member name="P:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.IsConnected">
             <summary>
             Returns true if we're currently connected to the broker
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.Connect">
             <summary>
             Connects the client to the broker's remote servers
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.IsWithinTradingHours">
             <summary>
             Returns true if we are within FXCM trading hours
             </summary>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.Disconnect">
             <summary>
             Disconnects the client from the broker's remote servers
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.GetOpenOrders">
             <summary>
             Gets all open orders on the account. 
             NOTE: The order objects returned do not have QC order IDs.
             </summary>
             <returns>The open orders returned from FXCM</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.GetAccountHoldings">
             <summary>
             Gets all holdings for the account
             </summary>
             <returns>The current holdings from the account</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.GetCashBalance">
             <summary>
             Gets the current cash balance for each currency held in the brokerage account
             </summary>
             <returns>The current cash balance for each currency available for trading</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.PlaceOrder(QuantConnect.Orders.Order)">
             <summary>
             Places a new order and assigns a new broker ID to the order
             </summary>
             <param name="order">The order to be placed</param>
             <returns>True if the request for a new order has been placed, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.UpdateOrder(QuantConnect.Orders.Order)">
             <summary>
             Updates the order with the same id
             </summary>
             <param name="order">The new order information</param>
             <returns>True if the request was made for the order to be updated, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.CancelOrder(QuantConnect.Orders.Order)">
             <summary>
             Cancels the order with the specified ID
             </summary>
             <param name="order">The order to cancel</param>
             <returns>True if the request was made for the order to be canceled, false otherwise</returns>
            </member>
        <member name="P:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.HistoryResponseTimeout">
             <summary>
             Gets/sets a timeout for history requests (in milliseconds)
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.MaximumHistoryRetryAttempts">
             <summary>
             Gets/sets the maximum number of retries for a history request
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.EnableOnlyHistoryRequests">
             <summary>
             Gets/sets a value to enable only history requests to this brokerage
             Set to true in parallel downloaders to avoid loading accounts, orders, positions etc. at connect time
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.DataPointCount">
             <summary>
             Gets the total number of data points emitted by this history provider
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.Initialize(QuantConnect.Packets.AlgorithmNodePacket,QuantConnect.Interfaces.IMapFileProvider,QuantConnect.Interfaces.IFactorFileProvider,QuantConnect.Interfaces.IDataFileProvider,System.Action{System.Int32})">
             <summary>
             Initializes this history provider to work for the specified job
             </summary>
             <param name="job">The job</param>
             <param name="mapFileProvider">Provider used to get a map file resolver to handle equity mapping</param>
             <param name="factorFileProvider">Provider used to get factor files to handle equity price scaling</param>
             <param name="dataFileProvider">Provider used to get data when it is not present on disk</param>
             <param name="statusUpdate">Function used to send status updates</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.GetHistory(System.Collections.Generic.IEnumerable{QuantConnect.Data.HistoryRequest},NodaTime.DateTimeZone)">
             <summary>
             Gets the history for the requested securities
             </summary>
             <param name="requests">The historical data requests</param>
             <param name="sliceTimeZone">The time zone used when time stamping the slice instances</param>
             <returns>An enumerable of the slices of data covering the span specified in each request</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.GetNextTicks">
             <summary>
             Get the next ticks from the live trading data queue
             </summary>
             <returns>IEnumerable list of ticks since the last update.</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.Subscribe(QuantConnect.Packets.LiveNodePacket,System.Collections.Generic.IEnumerable{QuantConnect.Symbol})">
             <summary>
             Adds the specified symbols to the subscription
             </summary>
             <param name="job">Job we're subscribing for:</param>
             <param name="symbols">The symbols to be added keyed by SecurityType</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.Unsubscribe(QuantConnect.Packets.LiveNodePacket,System.Collections.Generic.IEnumerable{QuantConnect.Symbol})">
             <summary>
             Removes the specified symbols to the subscription
             </summary>
             <param name="job">Job we're processing.</param>
             <param name="symbols">The symbols to be removed keyed by SecurityType</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.CanSubscribe(QuantConnect.Symbol)">
             <summary>
             Returns true if this brokerage supports the specified symbol
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.GetBidAndAsk(System.Collections.Generic.List{System.String})">
             <summary>
             Provides as public access to this data without requiring consumers to reference
             IKVM libraries
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.GetQuotes(System.Collections.Generic.List{System.String})">
             <summary>
             Gets the quotes for the symbol
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.GetUsdConversion(System.String)">
             <summary>
             Gets the current conversion rate into USD
             </summary>
             <remarks>Synchronous, blocking</remarks>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.messageArrived(com.fxcm.messaging.ITransportable)">
             <summary>
             Receives generic messages from the FXCM API
             </summary>
             <param name="message">Generic message received</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.OnTradingSessionStatus(com.fxcm.fix.pretrade.TradingSessionStatus)">
             <summary>
             TradingSessionStatus message handler
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.OnCollateralReport(com.fxcm.fix.posttrade.CollateralReport)">
             <summary>
             CollateralReport message handler
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.OnMarketDataSnapshot(com.fxcm.fix.pretrade.MarketDataSnapshot)">
             <summary>
             MarketDataSnapshot message handler
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.OnExecutionReport(com.fxcm.fix.trade.ExecutionReport)">
             <summary>
             ExecutionReport message handler
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.OnRequestForPositionsAck(com.fxcm.fix.posttrade.RequestForPositionsAck)">
             <summary>
             RequestForPositionsAck message handler
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.OnPositionReport(com.fxcm.fix.posttrade.PositionReport)">
             <summary>
             PositionReport message handler
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.OnOrderCancelReject(com.fxcm.fix.trade.OrderCancelReject)">
             <summary>
             OrderCancelReject message handler
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.messageArrived(com.fxcm.messaging.ISessionStatus)">
             <summary>
             Receives status messages from the FXCM API
             </summary>
             <param name="message">Status message received</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.ConvertOrder(com.fxcm.fix.trade.ExecutionReport)">
             <summary>
             Converts an FXCM order to a QuantConnect order.
             </summary>
             <param name="fxcmOrder">The FXCM order</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.ConvertDuration(com.fxcm.fix.ITimeInForce)">
             <summary>
             Converts an FXCM order duration to QuantConnect order duration
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.ConvertHolding(com.fxcm.fix.posttrade.PositionReport)">
             <summary>
             Converts an FXCM position to a QuantConnect holding.
             </summary>
             <param name="fxcmPosition">The FXCM position</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.ConvertOrderStatus(com.fxcm.entity.ICode)">
             <summary>
             Converts an FXCM OrderStatus to a QuantConnect <see cref="T:QuantConnect.Orders.OrderStatus" />
             </summary>
             <param name="status"></param>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.OrderIsOpen(System.String)">
             <summary>
             Returns true if the specified order is considered open, otherwise false
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.OrderIsClosed(System.String)">
             <summary>
             Returns true if the specified order is considered close, otherwise false
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.OrderIsBeingProcessed(System.String)">
             <summary>
             Returns true if the specified order is being processed, otherwise false
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.FromJavaDate(java.util.Date)">
             <summary>
             Converts a Java Date value to a DateTime value
             </summary>
             <param name="javaDate">The Java date</param>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.ToFxcmInterval(QuantConnect.Resolution)">
             <summary>
             Converts a LEAN Resolution to an IFXCMTimingInterval
             </summary>
             <param name="resolution">The resolution to convert</param>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerage.ToJavaDateUtc(System.DateTime)">
             <summary>
             Converts a Java Date value to a UTC DateTime value
             </summary>
             <param name="utcDateTime">The UTC DateTime value</param>
             <returns>A UTC Java Date value</returns>
            </member>
        <member name="T:QuantConnect.Brokerages.Fxcm.FxcmBrokerageFactory">
             <summary>
             Provides an implementation of <see cref="T:QuantConnect.Interfaces.IBrokerageFactory" /> that produces a <see cref="T:QuantConnect.Brokerages.Fxcm.FxcmBrokerage" />
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerageFactory.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.Fxcm.FxcmBrokerageFactory" /> class
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Fxcm.FxcmBrokerageFactory.BrokerageData">
             <summary>
             Gets the brokerage data required to run the brokerage from configuration/disk
             </summary>
             <remarks>
             The implementation of this property will create the brokerage data dictionary required for
             running live jobs. See <see cref="M:QuantConnect.Interfaces.IJobQueueHandler.NextJob(System.String@)" />
             </remarks>
            </member>
        <member name="P:QuantConnect.Brokerages.Fxcm.FxcmBrokerageFactory.BrokerageModel">
             <summary>
             Gets a new instance of the <see cref="T:QuantConnect.Brokerages.FxcmBrokerageModel" />
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerageFactory.CreateBrokerage(QuantConnect.Packets.LiveNodePacket,QuantConnect.Interfaces.IAlgorithm)">
             <summary>
             Creates a new <see cref="T:QuantConnect.Interfaces.IBrokerage" /> instance
             </summary>
             <param name="job">The job packet to create the brokerage for</param>
             <param name="algorithm">The algorithm instance</param>
             <returns>A new brokerage instance</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerageFactory.Dispose">
             <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             </summary>
             <filterpriority>2</filterpriority>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmBrokerageFactory.CreateBrokerageMessageHandler(QuantConnect.Interfaces.IAlgorithm,QuantConnect.Packets.AlgorithmNodePacket,QuantConnect.Interfaces.IApi)">
             <summary>
             Gets a brokerage message handler
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper">
             <summary>
             Provides the mapping between Lean symbols and FXCM symbols.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper.KnownSymbols">
             <summary>
             List of all known symbols for FXCM
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper.TupleList`2">
             <summary>
             Helper class to allow collection initializer on a List of tuples
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper.FxcmSymbolMappings">
             <summary>
             The list of mappings from FXCM symbols to Lean symbols.
             </summary>
             <remarks>T1 is FXCM symbol, T2 is Lean symbol</remarks>
            </member>
        <member name="F:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper.KnownCurrencies">
             <summary>
             The list of known FXCM currencies.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper.#ctor">
             <summary>
             Static constructor for the <see cref="T:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper" /> class
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper.GetBrokerageSymbol(QuantConnect.Symbol)">
             <summary>
             Converts a Lean symbol instance to an FXCM symbol
             </summary>
             <param name="symbol">A Lean symbol instance</param>
             <returns>The FXCM symbol</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper.GetLeanSymbol(System.String,QuantConnect.SecurityType,System.String,System.DateTime,System.Decimal,QuantConnect.OptionRight)">
             <summary>
             Converts an FXCM symbol to a Lean symbol instance
             </summary>
             <param name="brokerageSymbol">The FXCM symbol</param>
             <param name="securityType">The security type</param>
             <param name="market">The market</param>
             <param name="expirationDate">Expiration date of the security(if applicable)</param>
             <param name="strike">The strike of the security (if applicable)</param>
             <param name="optionRight">The option right of the security (if applicable)</param>
             <returns>A new Lean Symbol instance</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper.GetBrokerageSecurityType(System.String)">
             <summary>
             Returns the security type for an FXCM symbol
             </summary>
             <param name="brokerageSymbol">The FXCM symbol</param>
             <returns>The security type</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper.GetLeanSecurityType(System.String)">
             <summary>
             Returns the security type for a Lean symbol
             </summary>
             <param name="leanSymbol">The Lean symbol</param>
             <returns>The security type</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper.IsKnownBrokerageSymbol(System.String)">
             <summary>
             Checks if the symbol is supported by FXCM
             </summary>
             <param name="brokerageSymbol">The FXCM symbol</param>
             <returns>True if FXCM supports the symbol</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper.IsKnownLeanSymbol(QuantConnect.Symbol)">
             <summary>
             Checks if the symbol is supported by FXCM
             </summary>
             <param name="symbol">The Lean symbol</param>
             <returns>True if FXCM supports the symbol</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper.ConvertFxcmSymbolToLeanSymbol(System.String)">
             <summary>
             Converts an FXCM symbol to a Lean symbol string
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Fxcm.FxcmSymbolMapper.ConvertLeanSymbolToFxcmSymbol(System.String)">
             <summary>
             Converts a Lean symbol string to an FXCM symbol
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountDownloadEndEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.AccountDownloadEnd" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountDownloadEndEventArgs.Account">
             <summary>
             The account ID.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountDownloadEndEventArgs.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountDownloadEndEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountSummaryEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.AccountSummary" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountSummaryEventArgs.RequestId">
             <summary>
             The request's unique identifier.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountSummaryEventArgs.Account">
             <summary>
             The account ID.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountSummaryEventArgs.Tag">
             <summary>
             The account attribute being received.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountSummaryEventArgs.Value">
             <summary>
             The value of the attribute.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountSummaryEventArgs.Currency">
             <summary>
             The currency in which the attribute is expressed.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountSummaryEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountSummaryEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ActionSide">
             <summary>
             Order Action Side. Specifies whether securities should be bought or sold.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.ActionSide.Buy">
             <summary>
             Security is to be bought.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.ActionSide.Sell">
             <summary>
             Security is to be sold.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.ActionSide.Undefined">
             <summary>
             Undefined
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.ActionSide.SShort">
             <summary>
             Sell Short as part of a combo leg
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.ActionSide.SShortX">
             <summary>
             Short Sale Exempt action.
             SSHORTX allows some orders to be marked as exempt from the new SEC Rule 201
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.AgentDescription">
             <summary>
             Used for Rule 80A describes the type of trader.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.AgentDescription.Individual">
             <summary>
             An individual
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.AgentDescription.Agency">
             <summary>
             An Agency
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.AgentDescription.AgentOtherMember">
             <summary>
             An Agent or Other Member
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.AgentDescription.IndividualPtia">
             <summary>
             Individual PTIA
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.AgentDescription.AgencyPtia">
             <summary>
             Agency PTIA
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.AgentDescription.AgentOtherMemberPtia">
             <summary>
             Agether or Other Member PTIA
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.AgentDescription.IndividualPt">
             <summary>
             Individual PT
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.AgentDescription.AgencyPt">
             <summary>
             Agency PT
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.AgentDescription.AgentOtherMemberPt">
             <summary>
             Agent Other Member PT
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.AgentDescription.None">
             <summary>
             No Description Provided
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize">
             <summary>
             Historical Bar Size Requests
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.OneSecond">
             <summary>
             1 second bars
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.FiveSeconds">
             <summary>
             5 second bars
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.FifteenSeconds">
             <summary>
             15 second bars
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.ThirtySeconds">
             <summary>
             30 second bars
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.OneMinute">
             <summary>
             1 minute bars
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.TwoMinutes">
             <summary>
             2 minute bars
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.FiveMinutes">
             <summary>
             5 minute bars
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.FifteenMinutes">
             <summary>
             15 minute bars
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.ThirtyMinutes">
             <summary>
             30 minute bars
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.OneHour">
             <summary>
             1 hour bars
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.OneDay">
             <summary>
             1 day bars
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.OneWeek">
             <summary>
             1 week bars
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.OneMonth">
             <summary>
             1 month bars
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.BarSize.OneYear">
             <summary>
             1 year bars
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatus">
             <summary>
             Order Status constants.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatus.PendingSubmit">
             <summary>
             indicates that you have transmitted the order, but have not yet received
             confirmation that it has been accepted by the order destination.
             This order status is not sent by TWS and should be explicitly set by the API developer when an order is submitted.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatus.PendingCancel">
             <summary>
             PendingCancel - indicates that you have sent a request to cancel the order
             but have not yet received cancel confirmation from the order destination.
             At this point, your order is not confirmed canceled. You may still receive
             an execution while your cancellation request is pending.
             This order status is not sent by TWS and should be explicitly set by the API developer when an order is canceled.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatus.PreSubmitted">
             <summary>
             indicates that a simulated order type has been accepted by the IB system and
             that this order has yet to be elected. The order is held in the IB system
             (and the status remains DARK BLUE) until the election criteria are met.
             At that time the order is transmitted to the order destination as specified
             (and the order status color will change).
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatus.Submitted">
             <summary>
             indicates that your order has been accepted at the order destination and is working.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatus.Cancelled">
             <summary>
             indicates that the balance of your order has been confirmed canceled by the IB system.
             This could occur unexpectedly when IB or the destination has rejected your order.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatus.Filled">
             <summary>
             The order has been completely filled.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatus.Inactive">
             <summary>
             The Order is inactive
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatus.PartiallyFilled">
             <summary>
             The order is Partially Filled
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatus.ApiPending">
             <summary>
             Api Pending
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatus.ApiCancelled">
             <summary>
             Api Cancelled
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatus.Error">
             <summary>
             Indicates that there is an error with this order
             This order status is not sent by TWS and should be explicitly set by the API developer when an error has occured.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatus.None">
             <summary>
             No Order Status
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType">
             <summary>
             Order Type string constants
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.Market">
             <summary>
             A Market order is an order to buy or sell an asset at the bid or offer price currently available in the marketplace.
             Bonds, Forex, Futures, Future Options, Options, Stocks, Warrants
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.MarketOnClose">
             <summary>
             A market order that is submitted to execute as close to the closing price as possible.
             Non US Futures, Non US Options, Stocks
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.Limit">
             <summary>
             A limit order is an order to buy or sell a contract at a specified price or better.
             Bonds, Forex, Futures, Future Options, Options, Stocks, Warrants
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.LimitOnClose">
             <summary>
             An LOC (Limit-on-Close) order that executes at the closing price if the closing price is at or better than the submitted limit price, according to the rules of the specific exchange. Otherwise the order will be cancelled. 
             Non US Futures , Stocks
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.PeggedToMarket">
             <summary>
             An order that is pegged to buy on the best offer and sell on the best bid.
             Your order is pegged to buy on the best offer and sell on the best bid. You can also use an offset amount which is subtracted from the best offer for a buy order, and added to the best bid for a sell order.
             Stocks
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.Stop">
             <summary>
             A Stop order becomes a market order to buy or sell securities or commodities once the specified stop price is attained or penetrated.
             Forex, Futures, Future Options, Options, Stocks, Warrants
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.StopLimit">
             <summary>
             A STOP-LIMIT order is similar to a stop order in that a stop price will activate the order. However, once activated, the stop-limit order becomes a buy limit or sell limit order and can only be executed at a specific price or better. It is a combination of both the stop order and the limit order.
             Forex, Futures, Options, Stocks
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.TrailingStop">
             <summary>
             A trailing stop for a sell order sets the stop price at a fixed amount below the market price. If the market price rises, the stop loss price rises by the increased amount, but if the stock price falls, the stop loss price remains the same. The reverse is true for a buy trailing stop order.
             Forex, Futures, Future Options, Options, Stocks, Warrants
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.Relative">
             <summary>
             A Relative order derives its price from a combination of the market quote and a user-defined offset amount. The order is submitted as a limit order and modified according to the pricing logic until it is executed or you cancel the order.
             Options, Stocks
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.VolumeWeightedAveragePrice">
             <summary>
             The VWAP for a stock is calculated by adding the dollars traded for every transaction in that stock ("price" x "number of shares traded") and dividing the total shares traded. By default, a VWAP order is computed from the open of the market to the market close, and is calculated by volume weighting all transactions during this time period. TWS allows you to modify the cut-off and expiration times using the Time in Force and Expiration Date fields, respectively.
             Stocks
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.TrailingStopLimit">
             <summary>
             A trailing stop limit for a sell order sets the stop price at a fixed amount below the market price and defines a limit price for the sell order. If the market price rises, the stop loss price rises by the increased amount, but if the stock price falls, the stop loss price remains the same. When the order triggers, a limit order is submitted at the price you defined. The reverse is true for a buy trailing stop limit order.
             Forex, Futures, Future Options, Options, Stocks, Warrants
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.Volatility">
             <summary>
             TWS Version 857 introduced volatility trading of options, and a new order type, "VOL." What happens with VOL orders is that the limit price that is sent to the exchange is computed by TWS as a function of a daily or annualized option volatility provided by the user. VOL orders can be placed for any US option that trades on the BOX exchange. VOL orders are eligible for dynamic management, a powerful new functionality wherein TWS can manage options orders in response to specifications set by the user.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.None">
             <summary>
             VOL orders only. Enter an order type to instruct TWS to submit a
             delta neutral trade on full or partial execution of the VOL order.
             For no hedge delta order to be sent, specify NONE.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.Empty">
             <summary>
             Used to initialize the delta Order Field.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.Default">
             <summary>
             Default - used for Delta Neutral Order Type
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.Scale">
             <summary>
             Scale Order.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.MarketIfTouched">
             <summary>
             Market if Touched Order.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderType.LimitIfTouched">
             <summary>
             Limit if Touched Order.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.RightType">
             <summary>
             Option Right Type (Put or Call)
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.RightType.Put">
             <summary>
             Option type is a Put (Right to sell)
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.RightType.Call">
             <summary>
             Option type is a Call (Right to buy)
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.RightType.Undefined">
             <summary>
             Option type is not defined (contract is not an option).
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityType">
             <summary>
             Contract Security Types
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityType.Stock">
             <summary>
             Stock
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityType.Option">
             <summary>
             Option
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityType.Future">
             <summary>
             Future
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityType.Index">
             <summary>
             Index
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityType.FutureOption">
             <summary>
             FOP = options on futures
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityType.Cash">
             <summary>
             Cash
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityType.Bag">
             <summary>
             For Combination Orders - must use combo leg details
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityType.Bond">
             <summary>
             Bond
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityType.Warrant">
             <summary>
             Warrant
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityType.Commodity">
             <summary>
             Commodity
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityType.Bill">
             <summary>
             Bill
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityType.Undefined">
             <summary>
             Undefined Security Type
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.SoftDollarTiersEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.SoftDollarTiers" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.SoftDollarTiersEventArgs.RequestId">
             <summary>
             The id of the request.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.SoftDollarTiersEventArgs.Tiers">
             <summary>
             
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.SoftDollarTiersEventArgs.#ctor(System.Int32,IBApi.SoftDollarTier[])">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.SoftDollarTiersEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityDefinitionOptionParameterEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.SecurityDefinitionOptionParameter" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityDefinitionOptionParameterEventArgs.RequestId">
             <summary>
             ID of the request initiating the callback
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityDefinitionOptionParameterEventArgs.Exchange">
             <summary>
             
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityDefinitionOptionParameterEventArgs.UnderlyingConId">
             <summary>
             The conID of the underlying security
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityDefinitionOptionParameterEventArgs.TradingClass">
             <summary>
             The option trading class
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityDefinitionOptionParameterEventArgs.Multiplier">
             <summary>
             The option multiplier
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityDefinitionOptionParameterEventArgs.Expirations">
             <summary>
             A list of the expiries for the options of this underlying on this exchange
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityDefinitionOptionParameterEventArgs.Strikes">
             <summary>
             A list of the possible strikes for options of this underlying on this exchange
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityDefinitionOptionParameterEventArgs.#ctor(System.Int32,System.String,System.Int32,System.String,System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.Double})">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityDefinitionOptionParameterEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.CommissionReport" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs.CommissionReport">
             <summary>
             The structure that contains commission details.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs.#ctor(IBApi.CommissionReport)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ContractDetailsEventArgs">
             <summary>
             Event arguments class for the following events:
             <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ContractDetails" />
             <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.BondContractDetails" />
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ContractDetailsEventArgs.RequestId">
             <summary>
             The ID of the data request. Ensures that responses are matched to requests if several requests are in process.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ContractDetailsEventArgs.ContractDetails">
             <summary>
             This structure contains a full description of the contract being looked up.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.ContractDetailsEventArgs.#ctor(System.Int32,IBApi.ContractDetails)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ContractDetailsEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.CurrentTimeUtcEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.CurrentTimeUtc" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.CurrentTimeUtcEventArgs.CurrentTimeUtc">
             <summary>
             The current system time on the IB server.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.CurrentTimeUtcEventArgs.#ctor(System.DateTime)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.CurrentTimeUtcEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.DeltaNeutralValidationEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.DeltaNeutralValidation" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.DeltaNeutralValidationEventArgs.RequestId">
             <summary>
             The ID of the data request.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.DeltaNeutralValidationEventArgs.UnderComp">
             <summary>
             Underlying component.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.DeltaNeutralValidationEventArgs.#ctor(System.Int32,IBApi.UnderComp)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.DeltaNeutralValidationEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.DisplayGroupUpdatedEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.DisplayGroupUpdated" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.DisplayGroupUpdatedEventArgs.RequestId">
             <summary>
             The requestId specified in subscribeToGroupEvents().
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.DisplayGroupUpdatedEventArgs.ContractInfo">
             <summary>
             The encoded value that uniquely represents the contract in IB.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.DisplayGroupUpdatedEventArgs.#ctor(System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.DisplayGroupUpdatedEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ErrorEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.Error" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ErrorEventArgs.Id">
             <summary>
             The request identifier that generated the error.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ErrorEventArgs.Code">
             <summary>
             The code identifying the error.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ErrorEventArgs.Message">
             <summary>
             The description of the error.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.ErrorEventArgs.#ctor(System.Int32,System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ErrorEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ExecutionDetailsEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ExecutionDetails" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ExecutionDetailsEventArgs.RequestId">
             <summary>
             The request's identifier.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ExecutionDetailsEventArgs.Contract">
             <summary>
             This structure contains a full description of the contract that was executed.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ExecutionDetailsEventArgs.Execution">
             <summary>
             This structure contains addition order execution details.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.ExecutionDetailsEventArgs.#ctor(System.Int32,IBApi.Contract,IBApi.Execution)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ExecutionDetailsEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.FundamentalDataEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.FundamentalData" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.FundamentalDataEventArgs.RequestId">
             <summary>
             The request's identifier.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.FundamentalDataEventArgs.Data">
             <summary>
             One of these XML reports: Company overview,Financial summary,Financial ratios,Financial statements,Analyst estimates,Company calendar
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.FundamentalDataEventArgs.#ctor(System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.FundamentalDataEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEndEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.HistoricalDataEnd" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEndEventArgs.RequestId">
             <summary>
             The request's identifier.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEndEventArgs.Start">
             <summary>
             
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEndEventArgs.End">
             <summary>
             
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEndEventArgs.#ctor(System.Int32,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEndEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.HistoricalData" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs.RequestId">
             <summary>
             The request's identifier.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs.Date">
             <summary>
             The date-time stamp of the start of the bar. 
             The format is determined by the reqHistoricalData() formatDate parameter 
             (either as a yyyymmss hh:mm:ss formatted string or as system time according to the request).
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs.Open">
             <summary>
             The bar opening price.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs.High">
             <summary>
             The high price during the time covered by the bar.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs.Low">
             <summary>
             The low price during the time covered by the bar.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs.Close">
             <summary>
             The bar closing price.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs.Volume">
             <summary>
             The volume during the time covered by the bar.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs.Count">
             <summary>
             When TRADES historical data is returned, represents the number of trades that occurred during the time period the bar covers.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs.Wap">
             <summary>
             The weighted average price during the time covered by the bar.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs.HasGaps">
             <summary>
             Whether or not there are gaps in the data.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs.#ctor(System.Int32,System.String,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ManagedAccountsEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ManagedAccounts" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ManagedAccountsEventArgs.AccountsList">
             <summary>
             The comma delimited list of FA managed accounts.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.ManagedAccountsEventArgs.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ManagedAccountsEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.MarketDataTypeEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.MarketDataType" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.MarketDataTypeEventArgs.RequestId">
             <summary>
             The request's identifier.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.MarketDataTypeEventArgs.MarketDataType">
             <summary>
             1 for real-time streaming market data or 2 for frozen market data.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.MarketDataTypeEventArgs.#ctor(System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.MarketDataTypeEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.NextValidIdEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.NextValidId" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.NextValidIdEventArgs.OrderId">
             <summary>
             The next available order ID received from TWS upon connection. Increment all successive orders by one based on this Id.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.NextValidIdEventArgs.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.NextValidIdEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.OpenOrderEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OpenOrder" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OpenOrderEventArgs.OrderId">
             <summary>
             The order Id assigned by TWS. Used to cancel or update the order.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OpenOrderEventArgs.Contract">
             <summary>
             The Contract class attributes describe the contract.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OpenOrderEventArgs.Order">
             <summary>
             The Order class attributes define the details of the order.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OpenOrderEventArgs.OrderState">
             <summary>
             The orderState attributes include margin and commissions fields for both pre and post trade data.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.OpenOrderEventArgs.#ctor(System.Int32,IBApi.Contract,IBApi.Order,IBApi.OrderState)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.OpenOrderEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OrderStatus" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs.OrderId">
             <summary>
             The order Id that was specified previously in the call to placeOrder()
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs.Status">
             <summary>
             The order status.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs.Filled">
             <summary>
             Specifies the number of shares that have been executed.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs.Remaining">
             <summary>
             Specifies the number of shares still outstanding.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs.AverageFillPrice">
             <summary>
             The average price of the shares that have been executed. 
             This parameter is valid only if the filled parameter value is greater than zero. 
             Otherwise, the price parameter will be zero.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs.PermId">
             <summary>
             The TWS id used to identify orders. Remains the same over TWS sessions.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs.ParentId">
             <summary>
             The order ID of the parent order, used for bracket and auto trailing stop orders.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs.LastFillPrice">
             <summary>
             The last price of the shares that have been executed.
             This parameter is valid only if the filled parameter value is greater than zero.
             Otherwise, the price parameter will be zero.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs.ClientId">
             <summary>
             The ID of the client (or TWS) that placed the order. 
             Note that TWS orders have a fixed clientId and orderId of 0 that distinguishes them from API orders.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs.WhyHeld">
             <summary>
             This field is used to identify an order held when TWS is trying to locate shares for a short sell. 
             The value used to indicate this is 'locate'.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double,System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.Position" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionEventArgs.Account">
             <summary>
             The account holding the positions.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionEventArgs.Contract">
             <summary>
             This structure contains a full description of the position's contract.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionEventArgs.Position">
             <summary>
             The number of positions held.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionEventArgs.AverageCost">
             <summary>
             The average cost of the position.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionEventArgs.#ctor(System.String,IBApi.Contract,System.Int32,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountUpdateMultiEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.AccountUpdateMulti" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountUpdateMultiEventArgs.RequestId">
             <summary>
             The request's unique identifier.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountUpdateMultiEventArgs.Account">
             <summary>
             The account ID.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountUpdateMultiEventArgs.ModelCode">
             <summary>
             the model code with updates
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountUpdateMultiEventArgs.Key">
             <summary>
             the name of parameter
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountUpdateMultiEventArgs.Value">
             <summary>
             the value of parameter
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountUpdateMultiEventArgs.Currency">
             <summary>
             the currency of parameter
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountUpdateMultiEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.AccountUpdateMultiEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.RealtimeBarEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.RealtimeBar" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.RealtimeBarEventArgs.RequestId">
             <summary>
             The request's identifier.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.RealtimeBarEventArgs.Time">
             <summary>
             The date-time stamp of the start of the bar. 
             The format is determined by the reqHistoricalData() formatDate parameter 
             (either as a yyyymmss hh:mm:ss formatted string or as system time).
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.RealtimeBarEventArgs.Open">
             <summary>
             The bar opening price.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.RealtimeBarEventArgs.High">
             <summary>
             The high price during the time covered by the bar.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.RealtimeBarEventArgs.Low">
             <summary>
             The low price during the time covered by the bar.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.RealtimeBarEventArgs.Close">
             <summary>
             The bar closing price.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.RealtimeBarEventArgs.Volume">
             <summary>
             The volume during the time covered by the bar.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.RealtimeBarEventArgs.Wap">
             <summary>
             The weighted average price during the time covered by the bar.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.RealtimeBarEventArgs.Count">
             <summary>
             When TRADES data is returned, represents the number of trades that occurred during the time period the bar covers.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.RealtimeBarEventArgs.#ctor(System.Int32,System.Int64,System.Double,System.Double,System.Double,System.Double,System.Int64,System.Double,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.RealtimeBarEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.DisplayGroupListEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.DisplayGroupList" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.DisplayGroupListEventArgs.RequestId">
             <summary>
             The requestId specified in queryDisplayGroups().
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.DisplayGroupListEventArgs.Groups">
             <summary>
             A list of integers representing visible group ID separated by the �|� character, and sorted by most used group first. 
             This list will not change during TWS session (in other words, user cannot add a new group; sorting can change though). 
             Example: "3|1|2"
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.DisplayGroupListEventArgs.#ctor(System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.DisplayGroupListEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionMultiEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.PositionMulti" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionMultiEventArgs.RequestId">
             <summary>
             The id of the request.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionMultiEventArgs.Account">
             <summary>
             The account holding the position.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionMultiEventArgs.ModelCode">
             <summary>
             The model code holding the position.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionMultiEventArgs.Contract">
             <summary>
             The position's Contract.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionMultiEventArgs.Position">
             <summary>
             The number of positions held.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionMultiEventArgs.AverageCost">
             <summary>
             The average cost of the position.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionMultiEventArgs.#ctor(System.Int32,System.String,System.String,IBApi.Contract,System.Double,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.PositionMultiEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TimeInForce">
             <summary>
             Order Time in Force Values
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.TimeInForce.Day">
             <summary>
             Day
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.TimeInForce.GoodTillCancel">
             <summary>
             Good Till Cancel
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.TimeInForce.ImmediateOrCancel">
             <summary>
             You can set the time in force for MARKET or LIMIT orders as IOC. This dictates that any portion of the order not executed immediately after it becomes available on the market will be cancelled.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.TimeInForce.FillOrKill">
             <summary>
             Setting FOK as the time in force dictates that the entire order must execute immediately or be canceled.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.TimeInForce.GoodTillDate">
             <summary>
             Good Till Date
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.TimeInForce.MarketOnOpen">
             <summary>
             Market On Open
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.Client.TimeInForce.Undefined">
             <summary>
             Undefined
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyAndAuthCompletedEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.VerifyAndAuthCompleted" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyAndAuthCompletedEventArgs.IsSuccessful">
             <summary>
             
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyAndAuthCompletedEventArgs.ErrorText">
             <summary>
             
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyAndAuthCompletedEventArgs.#ctor(System.Boolean,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyAndAuthCompletedEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyCompletedEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.VerifyCompleted" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyCompletedEventArgs.IsSuccessful">
             <summary>
             
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyCompletedEventArgs.ErrorText">
             <summary>
             
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyCompletedEventArgs.#ctor(System.Boolean,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyCompletedEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyAndAuthMessageApiEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.VerifyAndAuthMessageApi" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyAndAuthMessageApiEventArgs.ApiData">
             <summary>
             
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyAndAuthMessageApiEventArgs.XyzChallenge">
             <summary>
             
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyAndAuthMessageApiEventArgs.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyAndAuthMessageApiEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyMessageApiEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.VerifyMessageApi" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyMessageApiEventArgs.ApiData">
             <summary>
             
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyMessageApiEventArgs.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyMessageApiEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs">
             <summary>
             Event arguments class for the following events:
             <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.AccountSummaryEnd" />
             <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ContractDetailsEnd" />
             <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ExecutionDetailsEnd" />
             <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.AccountUpdateMultiEnd" />
             <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.PositionMultiEnd" />
             <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ScannerDataEnd" />
             <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.SecurityDefinitionOptionParameterEnd" />
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs.RequestId">
             <summary>
             The request's identifier.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ReceiveFaEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ReceiveFa" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ReceiveFaEventArgs.FaDataType">
             <summary>
             Specifies the type of Financial Advisor configuration data being received from TWS.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ReceiveFaEventArgs.FaXmlData">
             <summary>
             The XML string containing the previously requested FA configuration information.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.ReceiveFaEventArgs.#ctor(System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ReceiveFaEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEfpEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickEfp" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEfpEventArgs.TickerId">
             <summary>
             The request's unique identifier.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEfpEventArgs.TickType">
             <summary>
             Specifies the type of tick being received.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEfpEventArgs.BasisPoints">
             <summary>
             Annualized basis points, which is representative of the financing rate that can be directly compared to broker rates.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEfpEventArgs.FormattedBasisPoints">
             <summary>
             Annualized basis points as a formatted string that depicts them in percentage form.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEfpEventArgs.ImpliedFuture">
             <summary>
             Implied futures price.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEfpEventArgs.HoldDays">
             <summary>
             The number of hold days until the expiry of the EFP.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEfpEventArgs.FutureExpiry">
             <summary>
             The expiration date of the single stock future.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEfpEventArgs.DividendImpact">
             <summary>
             The dividend impact upon the annualized basis points interest rate.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEfpEventArgs.DividendsToExpiry">
             <summary>
             The dividends expected until the expiration of the single stock future.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEfpEventArgs.#ctor(System.Int32,System.Int32,System.Double,System.String,System.Double,System.Int32,System.String,System.Double,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEfpEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEventArgs">
             <summary>
             Base event arguments class for Tick events
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEventArgs.TickerId">
             <summary>
             The request's unique identifier.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEventArgs.Field">
             <summary>
             Specifies the type of data being received.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEventArgs.#ctor(System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickGenericEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickGeneric" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickGenericEventArgs.Value">
             <summary>
             The value of the specified field.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.TickGenericEventArgs.#ctor(System.Int32,System.Int32,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickGenericEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickOptionComputationEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickOptionComputation" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickOptionComputationEventArgs.ImpliedVolatility">
             <summary>
             The implied volatility calculated by the TWS option modeler, using the specified tick type value.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickOptionComputationEventArgs.Delta">
             <summary>
             The option delta value.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickOptionComputationEventArgs.OptionPrice">
             <summary>
             The option price.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickOptionComputationEventArgs.PvDividend">
             <summary>
             The present value of dividends expected on the option's underlying.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickOptionComputationEventArgs.Gamma">
             <summary>
             The option gamma value.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickOptionComputationEventArgs.Vega">
             <summary>
             The option vega value.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickOptionComputationEventArgs.Theta">
             <summary>
             The option theta value.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickOptionComputationEventArgs.UnderlyingPrice">
             <summary>
             The price of the underlying.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.TickOptionComputationEventArgs.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickOptionComputationEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickPriceEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickPrice" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickPriceEventArgs.Price">
             <summary>
             The actual price.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickPriceEventArgs.CanAutoExecute">
             <summary>
             Specifies whether the price tick is available for automatic execution.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.TickPriceEventArgs.#ctor(System.Int32,System.Int32,System.Double,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickPriceEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickSizeEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickSize" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickSizeEventArgs.Size">
             <summary>
             The actual size.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.TickSizeEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickSizeEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickSnapshotEndEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickSnapshotEnd" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickSnapshotEndEventArgs.TickerId">
             <summary>
             The request's unique identifier.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.TickSnapshotEndEventArgs.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickSnapshotEndEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickStringEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickString" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.TickStringEventArgs.Value">
             <summary>
             The value of the specified field.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.TickStringEventArgs.#ctor(System.Int32,System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.TickStringEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountTimeEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.UpdateAccountTime" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountTimeEventArgs.Timestamp">
             <summary>
             The last update system time.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountTimeEventArgs.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountTimeEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountValueEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.UpdateAccountValue" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountValueEventArgs.Key">
             <summary>
             A string that indicates one type of account value.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountValueEventArgs.Value">
             <summary>
             The value associated with the key.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountValueEventArgs.Currency">
             <summary>
             Defines the currency type, in case the value is a currency type.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountValueEventArgs.AccountName">
             <summary>
             The account. Useful for Financial Advisor sub-account messages.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountValueEventArgs.#ctor(System.String,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountValueEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.UpdateMarketDepth" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthEventArgs.TickerId">
             <summary>
             The request's identifier.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthEventArgs.Position">
             <summary>
             Specifies the row Id of this market depth entry.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthEventArgs.Operation">
             <summary>
             Identifies how this order should be applied to the market depth.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthEventArgs.Side">
             <summary>
             Identifies the side of the book that this order belongs to.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthEventArgs.Price">
             <summary>
             The order price.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthEventArgs.Size">
             <summary>
             The order size.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthLevel2EventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.UpdateMarketDepthLevel2" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthLevel2EventArgs.TickerId">
             <summary>
             The request's identifier.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthLevel2EventArgs.Position">
             <summary>
             Specifies the row id of this market depth entry.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthLevel2EventArgs.MarketMaker">
             <summary>
             Specifies the exchange holding the order.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthLevel2EventArgs.Operation">
             <summary>
             Identifies how this order should be applied to the market depth.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthLevel2EventArgs.Side">
             <summary>
             Identifies the side of the book that this order belongs to.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthLevel2EventArgs.Price">
             <summary>
             The order price.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthLevel2EventArgs.Size">
             <summary>
             The order size.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthLevel2EventArgs.#ctor(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Double,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthLevel2EventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateNewsBulletinEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.UpdateNewsBulletin" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateNewsBulletinEventArgs.MessageId">
             <summary>
             The bulletin ID, incrementing for each new bulletin.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateNewsBulletinEventArgs.MessageType">
             <summary>
             Specifies the type of bulletin.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateNewsBulletinEventArgs.Message">
             <summary>
             The bulletin's message text.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateNewsBulletinEventArgs.OriginalExchange">
             <summary>
             The exchange from which this message originated.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateNewsBulletinEventArgs.#ctor(System.Int32,System.Int32,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateNewsBulletinEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerParametersEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ScannerParameters" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerParametersEventArgs.Xml">
             <summary>
             The xml-formatted string with the available parameters.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerParametersEventArgs.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerParametersEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerDataEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ScannerData" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerDataEventArgs.RequestId">
             <summary>
             The request's identifier.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerDataEventArgs.Rank">
             <summary>
             The ranking within the response of this bar.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerDataEventArgs.ContractDetails">
             <summary>
             This structure contains a full description of the contract that was executed.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerDataEventArgs.Distance">
             <summary>
             Varies based on query.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerDataEventArgs.Benchmark">
             <summary>
             Varies based on query.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerDataEventArgs.Projection">
             <summary>
             Varies based on query.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerDataEventArgs.LegsStr">
             <summary>
             Describes combo legs when scan is returning EFP.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerDataEventArgs.#ctor(System.Int32,System.Int32,IBApi.ContractDetails,System.String,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerDataEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs">
             <summary>
             Event arguments class for the <see cref="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.UpdatePortfolio" /> event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs.Contract">
             <summary>
             This structure contains a description of the contract which is being traded.
             The exchange field in a contract is not set for portfolio update.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs.Position">
             <summary>
             The number of positions held.
             If the position is 0, it means the position has just cleared.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs.MarketPrice">
             <summary>
             The unit price of the instrument.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs.MarketValue">
             <summary>
             The total market value of the instrument.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs.AverageCost">
             <summary>
             The average cost per share is calculated by dividing your cost (execution price + commission) by the quantity of your position.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs.UnrealisedPnl">
             <summary>
             The difference between the current market value of your open positions and the average cost, or Value - Average Cost.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs.RealisedPnl">
             <summary>
             Shows your profit on closed positions, which is the difference between your entry execution cost (execution price + commissions to open the position) and exit execution cost ((execution price + commissions to close the position)
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs.AccountName">
             <summary>
             The name of the account to which the message applies.  Useful for Financial Advisor sub-account messages.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs.#ctor(IBApi.Contract,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.HistoricalDataType">
             <summary>
             Historical Data Request Return Types
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.HistoricalDataType.Trades">
             <summary>
             Return Trade data only
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.HistoricalDataType.Midpoint">
             <summary>
             Return the mid point between the bid and ask
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.HistoricalDataType.Bid">
             <summary>
             Return Bid Prices only
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.HistoricalDataType.Ask">
             <summary>
             Return ask prices only
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.InteractiveBrokers.HistoricalDataType.BidAsk">
             <summary>
             Return Bid / Ask price only
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage">
             <summary>
             The Interactive Brokers brokerage
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.IsConnected">
             <summary>
             Returns true if we're currently connected to the broker
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.#ctor(QuantConnect.Securities.IOrderProvider,QuantConnect.Securities.ISecurityProvider)">
             <summary>
             Creates a new InteractiveBrokersBrokerage using values from configuration:
                 ib-account (required)
                 ib-host (optional, defaults to LOCALHOST)
                 ib-port (optional, defaults to 4001)
                 ib-agent-description (optional, defaults to Individual)
             </summary>
             <param name="orderProvider">An instance of IOrderProvider used to fetch Order objects by brokerage ID</param>
             <param name="securityProvider">The security provider used to give access to algorithm securities</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.#ctor(QuantConnect.Securities.IOrderProvider,QuantConnect.Securities.ISecurityProvider,System.String)">
             <summary>
             Creates a new InteractiveBrokersBrokerage for the specified account
             </summary>
             <param name="orderProvider">An instance of IOrderProvider used to fetch Order objects by brokerage ID</param>
             <param name="securityProvider">The security provider used to give access to algorithm securities</param>
             <param name="account">The account used to connect to IB</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.#ctor(QuantConnect.Securities.IOrderProvider,QuantConnect.Securities.ISecurityProvider,System.String,System.String,System.Int32,System.String)">
             <summary>
             Creates a new InteractiveBrokersBrokerage from the specified values
             </summary>
             <param name="orderProvider">An instance of IOrderProvider used to fetch Order objects by brokerage ID</param>
             <param name="securityProvider">The security provider used to give access to algorithm securities</param>
             <param name="account">The Interactive Brokers account name</param>
             <param name="host">host name or IP address of the machine where TWS is running. Leave blank to connect to the local host.</param>
             <param name="port">must match the port specified in TWS on the Configure&gt;API&gt;Socket Port field.</param>
             <param name="agentDescription">Used for Rule 80A describes the type of trader.</param>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.Client">
             <summary>
             Provides public access to the underlying IBClient instance
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.PlaceOrder(QuantConnect.Orders.Order)">
             <summary>
             Places a new order and assigns a new broker ID to the order
             </summary>
             <param name="order">The order to be placed</param>
             <returns>True if the request for a new order has been placed, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.UpdateOrder(QuantConnect.Orders.Order)">
             <summary>
             Updates the order with the same id
             </summary>
             <param name="order">The new order information</param>
             <returns>True if the request was made for the order to be updated, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.CancelOrder(QuantConnect.Orders.Order)">
             <summary>
             Cancels the order with the specified ID
             </summary>
             <param name="order">The order to cancel</param>
             <returns>True if the request was made for the order to be canceled, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetOpenOrders">
             <summary>
             Gets all open orders on the account
             </summary>
             <returns>The open orders returned from IB</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetAccountHoldings">
             <summary>
             Gets all holdings for the account
             </summary>
             <returns>The current holdings from the account</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetCashBalance">
             <summary>
             Gets the current cash balance for each currency held in the brokerage account
             </summary>
             <returns>The current cash balance for each currency available for trading</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetExecutions(System.String,System.String,System.String,System.Nullable{System.DateTime},System.String)">
             <summary>
             Gets the execution details matching the filter
             </summary>
             <returns>A list of executions matching the filter</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.Connect">
             <summary>
             Connects the client to the IB gateway
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.Disconnect">
             <summary>
             Disconnects the client from the IB gateway
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.Dispose">
             <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetAccountValues">
             <summary>
             Gets the raw account values sent from IB
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.IBPlaceOrder(QuantConnect.Orders.Order,System.Boolean,System.String)">
             <summary>
             Places the order with InteractiveBrokers
             </summary>
             <param name="order">The order to be placed</param>
             <param name="needsNewId">Set to true to generate a new order ID, false to leave it alone</param>
             <param name="exchange">The exchange to send the order to, defaults to "Smart" to use IB's smart routing</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetUsdConversion(System.String)">
             <summary>
             Gets the current conversion rate into USD
             </summary>
             <remarks>Synchronous, blocking</remarks>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.HandleError(System.Object,QuantConnect.Brokerages.InteractiveBrokers.Client.ErrorEventArgs)">
             <summary>
             Handles error messages from IB
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.TryWaitForReconnect">
             <summary>
             If we lose connection to TWS/IB servers we don't want to send the Error event if it is within
             the scheduled server reset times
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.HandleUpdateAccountValue(System.Object,QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountValueEventArgs)">
             <summary>
             Stores all the account values
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.HandleOrderStatusUpdates(System.Object,QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs)">
             <summary>
             Handle order events from IB
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.HandlePortfolioUpdates(System.Object,QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs)">
             <summary>
             Handle portfolio changed events from IB
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.ConvertOrder(QuantConnect.Orders.Order,IBApi.Contract,System.Int32)">
             <summary>
             Converts a QC order to an IB order
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.CreateContract(QuantConnect.Symbol,System.String)">
             <summary>
             Creates an IB contract from the order.
             </summary>
             <param name="symbol">The symbol whose contract we need to create</param>
             <param name="exchange">The exchange where the order will be placed, defaults to 'Smart'</param>
             <returns>A new IB contract for the order</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.ConvertOrderDirection(QuantConnect.Orders.OrderDirection)">
             <summary>
             Maps OrderDirection enumeration
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.ConvertOrderType(QuantConnect.Orders.OrderType)">
             <summary>
             Maps OrderType enum
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.ConvertOrderType(IBApi.Order)">
             <summary>
             Maps OrderType enum
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.ConvertOrderStatus(System.String)">
             <summary>
             Maps IB's OrderStats enum
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.ConvertSecurityType(QuantConnect.SecurityType)">
             <summary>
             Maps SecurityType enum
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.ConvertSecurityType(System.String)">
             <summary>
             Maps SecurityType enum
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.ConvertResolution(QuantConnect.Resolution)">
             <summary>
             Maps Resolution to IB representation 
             </summary>
             <param name="resolution"></param>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.ConvertResolutionToDuration(QuantConnect.Resolution)">
             <summary>
             Maps Resolution to IB span 
             </summary>
             <param name="resolution"></param>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.CreateHolding(QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs)">
             <summary>
             Creates a holding object from te UpdatePortfolioEventArgs
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.MapSymbol(IBApi.Contract)">
             <summary>
             Maps the IB Contract's symbol to a QC symbol
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetNextBrokerageOrderId">
             <summary>
             Handles the threading issues of creating an IB order ID
             </summary>
             <returns>The new IB ID</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.IncrementClientId">
             <summary>
             Increments the client ID for communication with the gateway
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.IsWithinScheduledServerResetTimes">
             <summary>
             This function is used to decide whether or not we should kill an algorithm
             when we lose contact with IB servers. IB performs server resets nightly
             and on Fridays they take everything down, so we'll prevent killing algos
             on Saturdays completely for the time being.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetNextTicks">
             <summary>
             IDataQueueHandler interface implementaion 
             </summary>
             
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.Subscribe(QuantConnect.Packets.LiveNodePacket,System.Collections.Generic.IEnumerable{QuantConnect.Symbol})">
             <summary>
             Adds the specified symbols to the subscription
             </summary>
             <param name="job">Job we're subscribing for:</param>
             <param name="symbols">The symbols to be added keyed by SecurityType</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.Unsubscribe(QuantConnect.Packets.LiveNodePacket,System.Collections.Generic.IEnumerable{QuantConnect.Symbol})">
             <summary>
             Removes the specified symbols to the subscription
             </summary>
             <param name="job">Job we're processing.</param>
             <param name="symbols">The symbols to be removed keyed by SecurityType</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.CanSubscribe(QuantConnect.Symbol)">
             <summary>
             Returns true if this data provide can handle the specified symbol
             </summary>
             <param name="symbol">The symbol to be handled</param>
             <returns>True if this data provider can get data for the symbol, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.AdjustQuantity(QuantConnect.SecurityType,System.Int32)">
             <summary>
             Modifies the quantity received from IB based on the security type
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.LookupSymbols(System.String,QuantConnect.SecurityType,System.String,System.String)">
             <summary>
             Method returns a collection of Symbols that are available at the broker. 
             </summary>
             <param name="lookupName">String representing the name to lookup</param>
             <param name="securityType">Expected security type of the returned symbols (if any)</param>
             <param name="securityCurrency">Expected security currency(if any)</param>
             <param name="securityExchange">Expected security exchange name(if any)</param>
             <returns></returns>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.DataPointCount">
             <summary>
             Gets the total number of data points emitted by this history provider
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.Initialize(QuantConnect.Packets.AlgorithmNodePacket,QuantConnect.Interfaces.IMapFileProvider,QuantConnect.Interfaces.IFactorFileProvider,QuantConnect.Interfaces.IDataFileProvider,System.Action{System.Int32})">
             <summary>
             Initializes this history provider to work for the specified job
             </summary>
             <param name="job">The job</param>
             <param name="mapFileProvider">Provider used to get a map file resolver to handle equity mapping</param>
             <param name="factorFileProvider">Provider used to get factor files to handle equity price scaling</param>
             <param name="dataFileProvider">Provider used to get data when it is not present on disk</param>
             <param name="statusUpdate">Function used to send status updates</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetHistory(System.Collections.Generic.IEnumerable{QuantConnect.Data.HistoryRequest},NodaTime.DateTimeZone)">
             <summary>
             Gets the history for the requested securities
             </summary>
             <param name="requests">The historical data requests</param>
             <param name="sliceTimeZone">The time zone used when time stamping the slice instances</param>
             <returns>An enumerable of the slices of data covering the span specified in each request</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetHistory(QuantConnect.Data.HistoryRequest,NodaTime.DateTimeZone)">
             <summary>
             Private method gets the history for the requested security
             </summary>
             <param name="request">The historical data request</param>
             <param name="sliceTimeZone">The time zone used when time stamping the slice instances</param>
             <returns>An enumerable of the slices of data covering the span specified in each request</returns>
             <remarks>For IB history limitations see https://www.interactivebrokers.com/en/software/api/apiguide/tables/historical_data_limitations.htm </remarks>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageFactory">
             <summary>
             Factory type for the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage" />
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageFactory.#ctor">
             <summary>
             Initializes a new instance of the InteractiveBrokersBrokerageFactory class
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageFactory.BrokerageData">
             <summary>
             Gets the brokerage data required to run the IB brokerage from configuration
             </summary>
             <remarks>
             The implementation of this property will create the brokerage data dictionary required for
             running live jobs. See <see cref="M:QuantConnect.Interfaces.IJobQueueHandler.NextJob(System.String@)" />
             </remarks>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageFactory.BrokerageModel">
             <summary>
             Gets a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokersBrokerageModel" />
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageFactory.CreateBrokerage(QuantConnect.Packets.LiveNodePacket,QuantConnect.Interfaces.IAlgorithm)">
             <summary>
             Creates a new IBrokerage instance and set ups the environment for the brokerage
             </summary>
             <param name="job">The job packet to create the brokerage for</param>
             <param name="algorithm">The algorithm instance</param>
             <returns>A new brokerage instance</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageFactory.Dispose">
             <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             Stops the InteractiveBrokersGatewayRunner
             </summary>
             <filterpriority>2</filterpriority>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient">
             <summary>
             Event based implementation of Interactive Brokers <see cref="T:IBApi.EWrapper" /> interface
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.Error">
             <summary>
             Error event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.CurrentTimeUtc">
             <summary>
             CurrentTimeUtc event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickPrice">
             <summary>
             TickPrice event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickSize">
             <summary>
             TickSize event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickString">
             <summary>
             TickString event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickGeneric">
             <summary>
             TickGeneric event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickEfp">
             <summary>
             TickEfp event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.DeltaNeutralValidation">
             <summary>
             DeltaNeutralValidation event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickOptionComputation">
             <summary>
             TickOptionComputation event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.TickSnapshotEnd">
             <summary>
             TickSnapshotEnd event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.NextValidId">
             <summary>
             NextValidId event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ManagedAccounts">
             <summary>
             ManagedAccounts event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ConnectionClosed">
             <summary>
             ConnectionClosed event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.AccountSummary">
             <summary>
             AccountSummary event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.AccountSummaryEnd">
             <summary>
             AccountSummaryEnd event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.BondContractDetails">
             <summary>
             BondContractDetails event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.UpdateAccountValue">
             <summary>
             UpdateAccountValue event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.UpdatePortfolio">
             <summary>
             UpdatePortfolio event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.UpdateAccountTime">
             <summary>
             UpdateAccountTime event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.AccountDownloadEnd">
             <summary>
             AccountDownloadEnd event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OrderStatus">
             <summary>
             OrderStatus event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OpenOrder">
             <summary>
             OpenOrder event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OpenOrderEnd">
             <summary>
             OpenOrderEnd event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ContractDetails">
             <summary>
             ContractDetails event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ContractDetailsEnd">
             <summary>
             ContractDetailsEnd event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ExecutionDetails">
             <summary>
             ExecutionDetails event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ExecutionDetailsEnd">
             <summary>
             ExecutionDetailsEnd event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.CommissionReport">
             <summary>
             CommissionReport event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.FundamentalData">
             <summary>
             FundamentalData event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.HistoricalData">
             <summary>
             HistoricalData event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.HistoricalDataEnd">
             <summary>
             HistoricalDataEnd event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.MarketDataType">
             <summary>
             MarketDataType event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.UpdateMarketDepth">
             <summary>
             UpdateMarketDepth event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.UpdateMarketDepthLevel2">
             <summary>
             UpdateMarketDepthLevel2 event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.UpdateNewsBulletin">
             <summary>
             UpdateNewsBulletin event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.Position">
             <summary>
             Position event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.PositionEnd">
             <summary>
             PositionEnd event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.RealtimeBar">
             <summary>
             RealtimeBar event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ScannerParameters">
             <summary>
             ScannerParameters event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ScannerData">
             <summary>
             ScannerData event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ScannerDataEnd">
             <summary>
             ScannerDataEnd event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ReceiveFa">
             <summary>
             ReceiveFa event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.VerifyMessageApi">
             <summary>
             VerifyMessageApi event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.VerifyCompleted">
             <summary>
             VerifyCompleted event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.VerifyAndAuthMessageApi">
             <summary>
             VerifyAndAuthMessageApi event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.VerifyAndAuthCompleted">
             <summary>
             VerifyAndAuthCompleted event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.DisplayGroupList">
             <summary>
             DisplayGroupList event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.DisplayGroupUpdated">
             <summary>
             DisplayGroupUpdated event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ConnectAck">
             <summary>
             ConnectAck event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.PositionMulti">
             <summary>
             PositionMulti event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.PositionMultiEnd">
             <summary>
             PositionMultiEnd event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.AccountUpdateMulti">
             <summary>
             AccountUpdateMulti event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.AccountUpdateMultiEnd">
             <summary>
             AccountUpdateMultiEnd event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.SecurityDefinitionOptionParameter">
             <summary>
             SecurityDefinitionOptionParameter event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.SecurityDefinitionOptionParameterEnd">
             <summary>
             SecurityDefinitionOptionParameterEnd event handler
             </summary>
            </member>
        <member name="E:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.SoftDollarTiers">
             <summary>
             SoftDollarTiers event handler
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.Connected">
             <summary>
             Returns true if we're currently connected to the broker
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.ClientSocket">
             <summary>
             Gets the instance of <see cref="T:IBApi.EClientSocket" /> to access IB API methods
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient" /> class
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.Dispose">
             <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.error(System.Exception)">
             <summary>
             This method is called when an exception occurs while handling a request.
             </summary>
             <param name="e">The exception that occurred.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.error(System.String)">
             <summary>
             This method is called when TWS wants to send an error message to the client. (V1).
             </summary>
             <param name="str">This is the text of the error message.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.error(System.Int32,System.Int32,System.String)">
             <summary>
             This method is called when there is an error with the communication or when TWS wants to send a message to the client.
             </summary>
             <param name="id">The request identifier that generated the error.</param>
             <param name="errorCode">The code identifying the error.</param>
             <param name="errorMsg">The description of the error.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.currentTime(System.Int64)">
             <summary>
             This method receives the current system time on IB's server as a result of calling reqCurrentTime().
             </summary>
             <param name="time">The current system time on the IB server.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.tickPrice(System.Int32,System.Int32,System.Double,System.Int32)">
             <summary>
             Market data tick price callback, handles all price-related ticks.
             </summary>
             <param name="tickerId">The request's unique identifier.</param>
             <param name="field">Specifies the type of price.</param>
             <param name="price">The actual price.</param>
             <param name="canAutoExecute">Specifies whether the price tick is available for automatic execution.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.tickSize(System.Int32,System.Int32,System.Int32)">
             <summary>
             Market data tick size callback, handles all size-related ticks.
             </summary>
             <param name="tickerId">The request's unique identifier.</param>
             <param name="field">The type of size being received.</param>
             <param name="size">The actual size.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.tickString(System.Int32,System.Int32,System.String)">
             <summary>
             Market data callback.
             </summary>
             <param name="tickerId">The request's unique identifier.</param>
             <param name="field">Specifies the type of tick being received.</param>
             <param name="value">The value of the specified field.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.tickGeneric(System.Int32,System.Int32,System.Double)">
             <summary>
             Market data callback.
             </summary>
             <param name="tickerId">The request's unique identifier.</param>
             <param name="field">Specifies the type of tick being received.</param>
             <param name="value">The value of the specified field.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.tickEFP(System.Int32,System.Int32,System.Double,System.String,System.Double,System.Int32,System.String,System.Double,System.Double)">
             <summary>
             Market data callback for Exchange for Physicals.
             </summary>
             <param name="tickerId">The request's unique identifier.</param>
             <param name="tickType">Specifies the type of tick being received.</param>
             <param name="basisPoints">Annualized basis points, which is representative of the financing rate that can be directly compared to broker rates.</param>
             <param name="formattedBasisPoints">Annualized basis points as a formatted string that depicts them in percentage form.</param>
             <param name="impliedFuture">Implied futures price.</param>
             <param name="holdDays">The number of hold days until the expiry of the EFP.</param>
             <param name="futureExpiry">The expiration date of the single stock future.</param>
             <param name="dividendImpact">The dividend impact upon the annualized basis points interest rate.</param>
             <param name="dividendsToExpiry">The dividends expected until the expiration of the single stock future.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.deltaNeutralValidation(System.Int32,IBApi.UnderComp)">
             <summary>
             Upon accepting a Delta-Neutral RFQ(request for quote), the server sends a deltaNeutralValidation() message with the UnderComp structure. 
             If the delta and price fields are empty in the original request, the confirmation will contain the current values from the server. 
             These values are locked when the RFQ is processed and remain locked until the RFQ is canceled.
             </summary>
             <param name="reqId">The ID of the data request.</param>
             <param name="underComp">Underlying component.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.tickOptionComputation(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             This method is called when the market in an option or its underlying moves. 
             TWS’s option model volatilities, prices, and deltas, along with the present value of dividends expected on that option's underlying are received.
             </summary>
             <param name="tickerId">The request's unique identifier.</param>
             <param name="field">Specifies the type of option computation.</param>
             <param name="impliedVolatility">The implied volatility calculated by the TWS option modeler, using the specified tick type value.</param>
             <param name="delta">The option delta value.</param>
             <param name="optPrice">The option price.</param>
             <param name="pvDividend">The present value of dividends expected on the option's underlying.</param>
             <param name="gamma">The option gamma value.</param>
             <param name="vega">The option vega value.</param>
             <param name="theta">The option theta value.</param>
             <param name="undPrice">The price of the underlying.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.tickSnapshotEnd(System.Int32)">
             <summary>
             This is called when a snapshot market data subscription has been fully received and there is nothing more to wait for. 
             This also covers the timeout case.
             </summary>
             <param name="tickerId">The request's unique identifier.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.nextValidId(System.Int32)">
             <summary>
             Receives the next valid Order ID.
             </summary>
             <param name="orderId">The next available order ID received from TWS upon connection. Increment all successive orders by one based on this Id.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.managedAccounts(System.String)">
             <summary>
             Receives a comma-separated string containing IDs of managed accounts.
             </summary>
             <param name="accountsList">The comma delimited list of FA managed accounts.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.connectionClosed">
             <summary>
             This method is called when TWS closes the sockets connection, or when TWS is shut down.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.accountSummary(System.Int32,System.String,System.String,System.String,System.String)">
             <summary>
             Returns the account information from TWS in response to reqAccountSummary().
             </summary>
             <param name="reqId">The request's unique identifier.</param>
             <param name="account">The account ID.</param>
             <param name="tag">The account attribute being received.</param>
             <param name="value">The value of the attribute.</param>
             <param name="currency">The currency in which the attribute is expressed.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.accountSummaryEnd(System.Int32)">
             <summary>
             This is called once all account information for a given reqAccountSummary() request are received.
             </summary>
             <param name="reqId">The request's identifier.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.bondContractDetails(System.Int32,IBApi.ContractDetails)">
             <summary>
             Sends bond contract data when the reqContractDetails() method has been called for bonds.
             </summary>
             <param name="reqId">The ID of the data request.</param>
             <param name="contract">This structure contains a full description of the bond contract being looked up.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.updateAccountValue(System.String,System.String,System.String,System.String)">
             <summary>
             This callback receives the subscribed account's information in response to reqAccountUpdates().
             You can only subscribe to one account at a time.
             </summary>
             <param name="key">A string that indicates one type of account value.</param>
             <param name="value">The value associated with the key.</param>
             <param name="currency">Defines the currency type, in case the value is a currency type.</param>
             <param name="accountName">The account. Useful for Financial Advisor sub-account messages.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.updatePortfolio(IBApi.Contract,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
             <summary>
             Receives the subscribed account's portfolio in response to reqAccountUpdates().
             If you want to receive the portfolios of all managed accounts, use reqPositions().
             </summary>
             <param name="contract">This structure contains a description of the contract which is being traded. The exchange field in a contract is not set for portfolio update.</param>
             <param name="position">The number of positions held. If the position is 0, it means the position has just cleared.</param>
             <param name="marketPrice">The unit price of the instrument.</param>
             <param name="marketValue">The total market value of the instrument.</param>
             <param name="averageCost">The average cost per share is calculated by dividing your cost (execution price + commission) by the quantity of your position.</param>
             <param name="unrealisedPnl">The difference between the current market value of your open positions and the average cost, or Value - Average Cost.</param>
             <param name="realisedPnl">Shows your profit on closed positions, which is the difference between your entry execution cost (execution price + commissions to open the position) and exit execution cost ((execution price + commissions to close the position)</param>
             <param name="accountName">The name of the account to which the message applies.  Useful for Financial Advisor sub-account messages.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.updateAccountTime(System.String)">
             <summary>
             Receives the last time at which the account was updated.
             </summary>
             <param name="timestamp">The last update system time.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.accountDownloadEnd(System.String)">
             <summary>
             This event is called when the receipt of an account's information has been completed.
             </summary>
             <param name="account">The account ID.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.orderStatus(System.Int32,System.String,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Int32,System.String)">
             <summary>
             This method is called whenever the status of an order changes. It is also called after reconnecting to TWS if the client has any open orders.
             </summary>
             <param name="orderId">The order Id that was specified previously in the call to placeOrder()</param>
             <param name="status">The order status.</param>
             <param name="filled">Specifies the number of shares that have been executed.</param>
             <param name="remaining">Specifies the number of shares still outstanding.</param>
             <param name="avgFillPrice">The average price of the shares that have been executed. This parameter is valid only if the filled parameter value is greater than zero. Otherwise, the price parameter will be zero.</param>
             <param name="permId">The TWS id used to identify orders. Remains the same over TWS sessions.</param>
             <param name="parentId">The order ID of the parent order, used for bracket and auto trailing stop orders.</param>
             <param name="lastFillPrice">The last price of the shares that have been executed. This parameter is valid only if the filled parameter value is greater than zero. Otherwise, the price parameter will be zero.</param>
             <param name="clientId">The ID of the client (or TWS) that placed the order. Note that TWS orders have a fixed clientId and orderId of 0 that distinguishes them from API orders.</param>
             <param name="whyHeld">This field is used to identify an order held when TWS is trying to locate shares for a short sell. The value used to indicate this is 'locate'.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.openOrder(System.Int32,IBApi.Contract,IBApi.Order,IBApi.OrderState)">
             <summary>
             This callback feeds in open orders.
             </summary>
             <param name="orderId">The order Id assigned by TWS. Used to cancel or update the order.</param>
             <param name="contract">The Contract class attributes describe the contract.</param>
             <param name="order">The Order class attributes define the details of the order.</param>
             <param name="orderState">The orderState attributes include margin and commissions fields for both pre and post trade data.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.openOrderEnd">
             <summary>
             This is called at the end of a given request for open orders.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.contractDetails(System.Int32,IBApi.ContractDetails)">
             <summary>
             Returns all contracts matching the requested parameters in reqContractDetails(). For example, you can receive an entire option chain.
             </summary>
             <param name="reqId">The ID of the data request. Ensures that responses are matched to requests if several requests are in process.</param>
             <param name="contractDetails">This structure contains a full description of the contract being looked up.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.contractDetailsEnd(System.Int32)">
             <summary>
             This method is called once all contract details for a given request are received. This helps to define the end of an option chain.
             </summary>
             <param name="reqId">The Id of the data request.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.execDetails(System.Int32,IBApi.Contract,IBApi.Execution)">
             <summary>
             Returns executions from the last 24 hours as a response to reqExecutions(), or when an order is filled.
             </summary>
             <param name="reqId">The request's identifier.</param>
             <param name="contract">This structure contains a full description of the contract that was executed.</param>
             <param name="execution">This structure contains addition order execution details.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.execDetailsEnd(System.Int32)">
             <summary>
             This method is called once all executions have been sent to a client in response to reqExecutions().
             </summary>
             <param name="reqId">The request's identifier.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.commissionReport(IBApi.CommissionReport)">
             <summary>
             This callback returns the commission report portion of an execution and is triggered immediately after a trade execution, or by calling reqExecution().
             </summary>
             <param name="commissionReport">The structure that contains commission details.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.fundamentalData(System.Int32,System.String)">
             <summary>
             This method is called to receive Reuters global fundamental market data. 
             There must be a subscription to Reuters Fundamental set up in Account Management before you can receive this data.
             </summary>
             <param name="reqId">The request's identifier.</param>
             <param name="data">One of these XML reports: Company overview,Financial summary,Financial ratios,Financial statements,Analyst estimates,Company calendar</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.historicalData(System.Int32,System.String,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Boolean)">
             <summary>
             Receives the historical data in response to reqHistoricalData().
             </summary>
             <param name="reqId">The request's identifier.</param>
             <param name="date">The date-time stamp of the start of the bar. The format is determined by the reqHistoricalData() formatDate parameter (either as a yyyymmss hh:mm:ss formatted string or as system time according to the request).</param>
             <param name="open">The bar opening price.</param>
             <param name="high">The high price during the time covered by the bar.</param>
             <param name="low">The low price during the time covered by the bar.</param>
             <param name="close">The bar closing price.</param>
             <param name="volume">The volume during the time covered by the bar.</param>
             <param name="count">When TRADES historical data is returned, represents the number of trades that occurred during the time period the bar covers.</param>
             <param name="wap">The weighted average price during the time covered by the bar.</param>
             <param name="hasGaps">Whether or not there are gaps in the data.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.historicalDataEnd(System.Int32,System.String,System.String)">
             <summary>
             Marks the ending of the historical bars reception.
             </summary>
             <param name="reqId">The request's identifier.</param>
             <param name="start"></param>
             <param name="end"></param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.marketDataType(System.Int32,System.Int32)">
             <summary>
             TWS sends a marketDataType(type) callback to the API, where type is set to Frozen or RealTime, to announce that market data has been switched between frozen and real-time. 
             This notification occurs only when market data switches between real-time and frozen. 
             The marketDataType() callback accepts a reqId parameter and is sent per every subscription because different contracts can generally trade on a different schedule.
             </summary>
             <param name="reqId">The request's identifier.</param>
             <param name="marketDataType">1 for real-time streaming market data or 2 for frozen market data.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.updateMktDepth(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32)">
             <summary>
             Returns market depth (the order book) in response to reqMktDepth().
             </summary>
             <param name="tickerId">The request's identifier.</param>
             <param name="position">Specifies the row Id of this market depth entry.</param>
             <param name="operation">Identifies how this order should be applied to the market depth.</param>
             <param name="side">Identifies the side of the book that this order belongs to.</param>
             <param name="price">The order price.</param>
             <param name="size">The order size.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.updateMktDepthL2(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Double,System.Int32)">
             <summary>
             Returns Level II market depth in response to reqMktDepth().
             </summary>
             <param name="tickerId">The request's identifier.</param>
             <param name="position">Specifies the row id of this market depth entry.</param>
             <param name="marketMaker">Specifies the exchange holding the order.</param>
             <param name="operation">Identifies how this order should be applied to the market depth.</param>
             <param name="side">Identifies the side of the book that this order belongs to.</param>
             <param name="price">The order price.</param>
             <param name="size">The order size.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.updateNewsBulletin(System.Int32,System.Int32,System.String,System.String)">
             <summary>
             Provides news bulletins if the client has subscribed (i.e. by calling the reqNewsBulletins() method).
             </summary>
             <param name="msgId">The bulletin ID, incrementing for each new bulletin.</param>
             <param name="msgType">Specifies the type of bulletin.</param>
             <param name="message">The bulletin's message text.</param>
             <param name="origExchange">The exchange from which this message originated.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.position(System.String,IBApi.Contract,System.Double,System.Double)">
             <summary>
             This event returns open positions for all accounts in response to the reqPositions() method.
             </summary>
             <param name="account">The account holding the positions.</param>
             <param name="contract">This structure contains a full description of the position's contract.</param>
             <param name="pos">The number of positions held.</param>
             <param name="avgCost">The average cost of the position.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.positionEnd">
             <summary>
             This is called once all position data for a given request are received and functions as an end marker for the position() data.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.realtimeBar(System.Int32,System.Int64,System.Double,System.Double,System.Double,System.Double,System.Int64,System.Double,System.Int32)">
             <summary>
             Updates real time 5-second bars.
             </summary>
             <param name="reqId">The request's identifier.</param>
             <param name="time">The date-time stamp of the start of the bar. The format is determined by the reqHistoricalData() formatDate parameter (either as a yyyymmss hh:mm:ss formatted string or as system time).</param>
             <param name="open">The bar opening price.</param>
             <param name="high">The high price during the time covered by the bar.</param>
             <param name="low">The low price during the time covered by the bar.</param>
             <param name="close">The bar closing price.</param>
             <param name="volume">The volume during the time covered by the bar.</param>
             <param name="wap">The weighted average price during the time covered by the bar.</param>
             <param name="count">When TRADES data is returned, represents the number of trades that occurred during the time period the bar covers.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.scannerParameters(System.String)">
             <summary>
             This method receives an XML document that describes the valid parameters that a scanner subscription can have.
             </summary>
             <param name="xml">The xml-formatted string with the available parameters.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.scannerData(System.Int32,System.Int32,IBApi.ContractDetails,System.String,System.String,System.String,System.String)">
             <summary>
             This method receives the requested market scanner data results.
             </summary>
             <param name="reqId">The request's identifier.</param>
             <param name="rank">The ranking within the response of this bar.</param>
             <param name="contractDetails">This structure contains a full description of the contract that was executed.</param>
             <param name="distance">Varies based on query.</param>
             <param name="benchmark">Varies based on query.</param>
             <param name="projection">Varies based on query.</param>
             <param name="legsStr">Describes combo legs when scan is returning EFP.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.scannerDataEnd(System.Int32)">
             <summary>
             Marks the end of one scan (the receipt of scanner data has ended).
             </summary>
             <param name="reqId">The request's identifier.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.receiveFA(System.Int32,System.String)">
             <summary>
             This method receives Financial Advisor configuration information from TWS.
             </summary>
             <param name="faDataType">Specifies the type of Financial Advisor configuration data being received from TWS.</param>
             <param name="faXmlData">The XML string containing the previously requested FA configuration information.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.verifyMessageAPI(System.String)">
             <summary>
             Deprecated Function.
             </summary>
             <param name="apiData"></param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.verifyCompleted(System.Boolean,System.String)">
             <summary>
             DOC_TODO.
             </summary>
             <param name="isSuccessful"></param>
             <param name="errorText"></param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.verifyAndAuthMessageAPI(System.String,System.String)">
             <summary>
             DOC_TODO.
             </summary>
             <param name="apiData"></param>
             <param name="xyzChallenge"></param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.verifyAndAuthCompleted(System.Boolean,System.String)">
             <summary>
             DOC_TODO.
             </summary>
             <param name="isSuccessful"></param>
             <param name="errorText"></param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.displayGroupList(System.Int32,System.String)">
             <summary>
             This callback is a one-time response to queryDisplayGroups().
             </summary>
             <param name="reqId">The requestId specified in queryDisplayGroups().</param>
             <param name="groups">A list of integers representing visible group ID separated by the “|” character, and sorted by most used group first. This list will not change during TWS session (in other words, user cannot add a new group; sorting can change though). Example: "3|1|2"</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.displayGroupUpdated(System.Int32,System.String)">
             <summary>
             This is sent by TWS to the API client once after receiving the subscription request subscribeToGroupEvents(), and will be sent again if the selected contract in the subscribed display group has changed.
             </summary>
             <param name="reqId">The requestId specified in subscribeToGroupEvents().</param>
             <param name="contractInfo">The encoded value that uniquely represents the contract in IB.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.connectAck">
             <summary>
             Callback signifying completion of successful connection.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.positionMulti(System.Int32,System.String,System.String,IBApi.Contract,System.Double,System.Double)">
             <summary>
             Provides the portfolio's open positions.
             </summary>
             <param name="requestId">The id of the request.</param>
             <param name="account">The account holding the position.</param>
             <param name="modelCode">The model code holding the position.</param>
             <param name="contract">The position's Contract.</param>
             <param name="pos">The number of positions held.</param>
             <param name="avgCost">The average cost of the position.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.positionMultiEnd(System.Int32)">
             <summary>
             Indicates all the positions have been transmitted.
             </summary>
             <param name="requestId">The id of the request.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.accountUpdateMulti(System.Int32,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Provides the account updates.
             </summary>
             <param name="requestId">The id of the request,</param>
             <param name="account">The account with updates.</param>
             <param name="modelCode">The model code with updates.</param>
             <param name="key">The name of parameter.</param>
             <param name="value">The value of parameter.</param>
             <param name="currency">The currency of parameter.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.accountUpdateMultiEnd(System.Int32)">
             <summary>
             Indicates all the account updates have been transmitted.
             </summary>
             <param name="requestId">The id of the request.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.securityDefinitionOptionParameter(System.Int32,System.String,System.Int32,System.String,System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.Double})">
             <summary>
             Returns the option chain for an underlying on an exchange specified in reqSecDefOptParams.
             There will be multiple callbacks to securityDefinitionOptionParameter if multiple exchanges are specified in reqSecDefOptParams.
             </summary>
             <param name="reqId">ID of the request initiating the callback</param>
             <param name="exchange"></param>
             <param name="underlyingConId">The conID of the underlying security</param>
             <param name="tradingClass">The option trading class</param>
             <param name="multiplier">The option multiplier</param>
             <param name="expirations">A list of the expiries for the options of this underlying on this exchange</param>
             <param name="strikes">A list of the possible strikes for options of this underlying on this exchange</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.securityDefinitionOptionParameterEnd(System.Int32)">
             <summary>
             Called when all callbacks to securityDefinitionOptionParameter are complete
             </summary>
             <param name="reqId">the ID used in the call to securityDefinitionOptionParameter</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.softDollarTiers(System.Int32,IBApi.SoftDollarTier[])">
             <summary>
             
             </summary>
             <param name="reqId">The id of the request.</param>
             <param name="tiers"></param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnError(QuantConnect.Brokerages.InteractiveBrokers.Client.ErrorEventArgs)">
             <summary>
             Error event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnCurrentTimeUtc(QuantConnect.Brokerages.InteractiveBrokers.Client.CurrentTimeUtcEventArgs)">
             <summary>
             CurrentTimeUtc event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnTickPrice(QuantConnect.Brokerages.InteractiveBrokers.Client.TickPriceEventArgs)">
             <summary>
             TickPrice event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnTickSize(QuantConnect.Brokerages.InteractiveBrokers.Client.TickSizeEventArgs)">
             <summary>
             TickSize event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnTickString(QuantConnect.Brokerages.InteractiveBrokers.Client.TickStringEventArgs)">
             <summary>
             TickString event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnTickGeneric(QuantConnect.Brokerages.InteractiveBrokers.Client.TickGenericEventArgs)">
             <summary>
             TickGeneric event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnTickEfp(QuantConnect.Brokerages.InteractiveBrokers.Client.TickEfpEventArgs)">
             <summary>
             TickEfp event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnDeltaNeutralValidation(QuantConnect.Brokerages.InteractiveBrokers.Client.DeltaNeutralValidationEventArgs)">
             <summary>
             DeltaNeutralValidation event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnTickOptionComputation(QuantConnect.Brokerages.InteractiveBrokers.Client.TickOptionComputationEventArgs)">
             <summary>
             TickOptionComputation event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnTickSnapshotEnd(QuantConnect.Brokerages.InteractiveBrokers.Client.TickSnapshotEndEventArgs)">
             <summary>
             TickSnapshotEnd event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnNextValidId(QuantConnect.Brokerages.InteractiveBrokers.Client.NextValidIdEventArgs)">
             <summary>
             NextValidId event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnManagedAccounts(QuantConnect.Brokerages.InteractiveBrokers.Client.ManagedAccountsEventArgs)">
             <summary>
             ManagedAccounts event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnConnectionClosed">
             <summary>
             ConnectionClosed event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnAccountSummary(QuantConnect.Brokerages.InteractiveBrokers.Client.AccountSummaryEventArgs)">
             <summary>
             AccountSummary event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnAccountSummaryEnd(QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs)">
             <summary>
             AccountSummaryEnd event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnBondContractDetails(QuantConnect.Brokerages.InteractiveBrokers.Client.ContractDetailsEventArgs)">
             <summary>
             BondContractDetails event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnUpdateAccountValue(QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountValueEventArgs)">
             <summary>
             UpdateAccountValue event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnUpdatePortfolio(QuantConnect.Brokerages.InteractiveBrokers.Client.UpdatePortfolioEventArgs)">
             <summary>
             UpdatePortfolio event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnUpdateAccountTime(QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateAccountTimeEventArgs)">
             <summary>
             UpdateAccountTime event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnAccountDownloadEnd(QuantConnect.Brokerages.InteractiveBrokers.Client.AccountDownloadEndEventArgs)">
             <summary>
             AccountDownloadEnd event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnOrderStatus(QuantConnect.Brokerages.InteractiveBrokers.Client.OrderStatusEventArgs)">
             <summary>
             OrderStatus event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnOpenOrder(QuantConnect.Brokerages.InteractiveBrokers.Client.OpenOrderEventArgs)">
             <summary>
             OpenOrder event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnOpenOrderEnd">
             <summary>
             OpenOrderEnd event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnContractDetails(QuantConnect.Brokerages.InteractiveBrokers.Client.ContractDetailsEventArgs)">
             <summary>
             ContractDetails event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnContractDetailsEnd(QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs)">
             <summary>
             ContractDetailsEnd event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnExecutionDetails(QuantConnect.Brokerages.InteractiveBrokers.Client.ExecutionDetailsEventArgs)">
             <summary>
             ExecutionDetails event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnExecutionDetailsEnd(QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs)">
             <summary>
             ExecutionDetailsEnd event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnCommissionReport(QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs)">
             <summary>
             CommissionReport event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnFundamentalData(QuantConnect.Brokerages.InteractiveBrokers.Client.FundamentalDataEventArgs)">
             <summary>
             FundamentalData event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnHistoricalData(QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEventArgs)">
             <summary>
             HistoricalData event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnHistoricalDataEnd(QuantConnect.Brokerages.InteractiveBrokers.Client.HistoricalDataEndEventArgs)">
             <summary>
             HistoricalDataEnd event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnMarketDataType(QuantConnect.Brokerages.InteractiveBrokers.Client.MarketDataTypeEventArgs)">
             <summary>
             MarketDataType event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnUpdateMarketDepth(QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthEventArgs)">
             <summary>
             UpdateMarketDepth event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnUpdateMarketDepthLevel2(QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateMarketDepthLevel2EventArgs)">
             <summary>
             UpdateMarketDepthLevel2 event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnUpdateNewsBulletin(QuantConnect.Brokerages.InteractiveBrokers.Client.UpdateNewsBulletinEventArgs)">
             <summary>
             UpdateNewsBulletin event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnPosition(QuantConnect.Brokerages.InteractiveBrokers.Client.PositionEventArgs)">
             <summary>
             Position event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnPositionEnd">
             <summary>
             PositionEnd event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnRealtimeBar(QuantConnect.Brokerages.InteractiveBrokers.Client.RealtimeBarEventArgs)">
             <summary>
             RealtimeBar event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnScannerParameters(QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerParametersEventArgs)">
             <summary>
             ScannerParameters event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnScannerData(QuantConnect.Brokerages.InteractiveBrokers.Client.ScannerDataEventArgs)">
             <summary>
             ScannerData event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnScannerDataEnd(QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs)">
             <summary>
             ScannerDataEnd event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnReceiveFa(QuantConnect.Brokerages.InteractiveBrokers.Client.ReceiveFaEventArgs)">
             <summary>
             ReceiveFa event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnVerifyMessageApi(QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyMessageApiEventArgs)">
             <summary>
             VerifyMessageApi event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnVerifyCompleted(QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyCompletedEventArgs)">
             <summary>
             VerifyCompleted event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnVerifyAndAuthMessageApi(QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyAndAuthMessageApiEventArgs)">
             <summary>
             VerifyAndAuthMessageApi event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnVerifyAndAuthCompleted(QuantConnect.Brokerages.InteractiveBrokers.Client.VerifyAndAuthCompletedEventArgs)">
             <summary>
             VerifyAndAuthCompleted event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnDisplayGroupList(QuantConnect.Brokerages.InteractiveBrokers.Client.DisplayGroupListEventArgs)">
             <summary>
             DisplayGroupList event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnDisplayGroupUpdated(QuantConnect.Brokerages.InteractiveBrokers.Client.DisplayGroupUpdatedEventArgs)">
             <summary>
             DisplayGroupUpdated event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnConnectAck">
             <summary>
             ConnectAck event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnPositionMulti(QuantConnect.Brokerages.InteractiveBrokers.Client.PositionMultiEventArgs)">
             <summary>
             PositionMulti event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnPositionMultiEnd(QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs)">
             <summary>
             PositionMultiEnd event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnAccountUpdateMulti(QuantConnect.Brokerages.InteractiveBrokers.Client.AccountUpdateMultiEventArgs)">
             <summary>
             AccountUpdateMulti event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnAccountUpdateMultiEnd(QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs)">
             <summary>
             AccountUpdateMultiEnd event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnSecurityDefinitionOptionParameter(QuantConnect.Brokerages.InteractiveBrokers.Client.SecurityDefinitionOptionParameterEventArgs)">
             <summary>
             SecurityDefinitionOptionParameter event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnSecurityDefinitionOptionParameterEnd(QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs)">
             <summary>
             SecurityDefinitionOptionParameterEnd event invocator
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.Client.InteractiveBrokersClient.OnSoftDollarTiers(QuantConnect.Brokerages.InteractiveBrokers.Client.SoftDollarTiersEventArgs)">
             <summary>
             SoftDollarTiers event invocator
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersGatewayRunner">
             <summary>
             Handles launching and killing the IB Controller script
             </summary>
             <remarks>
             Requires TWS or IB Gateway and IBController installed to run
             </remarks>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersGatewayRunner.StartFromConfiguration">
             <summary>
             Starts the interactive brokers gateway using values from configuration
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersGatewayRunner.Start(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Starts the IB Gateway
             </summary>
             <param name="ibControllerDirectory">Directory to the IB controller installation</param>
             <param name="twsDirectory"></param>
             <param name="userId">The log in user id</param>
             <param name="password">The log in password</param>
             <param name="tradingMode">Live or Paper trading modes</param>
             <param name="useTws">True to use Trader Work Station, false to just launch the API gateway</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersGatewayRunner.Stop">
             <summary>
             Stops the IB Gateway
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersSymbolMapper">
             <summary>
             Provides the mapping between Lean symbols and InteractiveBrokers symbols.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersSymbolMapper.#ctor">
             <summary>
             Constructs InteractiveBrokersSymbolMapper. Default parameters are used.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersSymbolMapper.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
             Constructs InteractiveBrokersSymbolMapper
             </summary>
             <param name="ibNameMap">New names map (IB -&gt; LEAN)</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersSymbolMapper.#ctor(System.String)">
             <summary>
             Constructs InteractiveBrokersSymbolMapper
             </summary>
             <param name="ibNameMapFullName">Full file name of the map file</param>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersSymbolMapper.GetBrokerageSymbol(QuantConnect.Symbol)">
             <summary>
             Converts a Lean symbol instance to an InteractiveBrokers symbol
             </summary>
             <param name="symbol">A Lean symbol instance</param>
             <returns>The InteractiveBrokers symbol</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersSymbolMapper.GetLeanSymbol(System.String,QuantConnect.SecurityType,System.String,System.DateTime,System.Decimal,QuantConnect.OptionRight)">
             <summary>
             Converts an InteractiveBrokers symbol to a Lean symbol instance
             </summary>
             <param name="brokerageSymbol">The InteractiveBrokers symbol</param>
             <param name="securityType">The security type</param>
             <param name="market">The market</param>
             <param name="expirationDate">Expiration date of the security(if applicable)</param>
             <param name="strike">The strike of the security (if applicable)</param>
             <param name="optionRight">The option right of the security (if applicable)</param>
             <returns>A new Lean Symbol instance</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersSymbolMapper.GetBrokerageRootSymbol(System.String)">
             <summary>
             IB specific versions of the symbol mapping (GetBrokerageRootSymbol) for future root symbols
             </summary>
             <param name="rootSymbol">LEAN root symbol</param>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersSymbolMapper.GetLeanRootSymbol(System.String)">
             <summary>
             IB specific versions of the symbol mapping (GetLeanRootSymbol) for future root symbols
             </summary>
             <param name="brokerageRootSymbol">IB Brokerage root symbol</param>
             <returns></returns>
            </member>
        <member name="T:QuantConnect.Brokerages.ISymbolMapper">
             <summary>
             Provides the mapping between Lean symbols and brokerage specific symbols.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.ISymbolMapper.GetBrokerageSymbol(QuantConnect.Symbol)">
             <summary>
             Converts a Lean symbol instance to a brokerage symbol
             </summary>
             <param name="symbol">A Lean symbol instance</param>
             <returns>The brokerage symbol</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.ISymbolMapper.GetLeanSymbol(System.String,QuantConnect.SecurityType,System.String,System.DateTime,System.Decimal,QuantConnect.OptionRight)">
             <summary>
             Converts a brokerage symbol to a Lean symbol instance
             </summary>
             <param name="brokerageSymbol">The brokerage symbol</param>
             <param name="securityType">The security type</param>
             <param name="market">The market</param>
             <param name="expirationDate">Expiration date of the security(if applicable)</param>
             <param name="strike">The strike of the security (if applicable)</param>
             <param name="optionRight">The option right of the security (if applicable)</param>
             <returns>A new Lean Symbol instance</returns>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Account">
             <summary>
             Represents the Oanda Account.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Communications.AccountResponse">
             <summary>
             Represents the web response when creating a new account with Oanda.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Communications.AccountsResponse">
             <summary>
             Represents the web response when querying the list of accounts belong to one Oanda user.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Communications.InstrumentsResponse">
             <summary>
             Represent web response for the list of active/tradable instruments provided by Oanda.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Communications.OrdersResponse">
             <summary>
             Represents the web response of the current active orders from Oanda.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Communications.PositionsResponse">
             <summary>
             Represents the current active positions from Oanda.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Communications.PostOrderResponse">
             <summary>
             Represents the post order response from Oanda.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Communications.PricesResponse">
             <summary>
             Represent the web response of the current price of active instruments from Oanda.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Communications.Response">
             <summary>
             Represents the Restful web response from Oanda.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Communications.TradesResponse">
             <summary>
             Represent the Active Trades Web Response. 
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Event">
             <summary>
             Represents a single event when subscribed to the streaming events.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Heartbeat">
             <summary>
             Represent a Heartbeat for an <see cref="T:QuantConnect.Brokerages.Oanda.DataType.Event" /> class.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.IHeartbeat">
             <summary>
             Represents the interface for the HeartBeat and RateStreamResponse class.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.IsOptionalAttribute">
             <summary>
             Represents whether a property is optional.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.MaxValueAttribute">
             <summary>
             Represents maximum value of a property.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.MinValueAttribute">
             <summary>
             Represents minimum value of a property.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Instrument">
             <summary>
             Represents a financial instrument / product provided by Oanda.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Order">
             <summary>
             Represents an order on Oanda.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Position">
             <summary>
             Represent a Position in Oanda.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Price">
             <summary>
             Represents the Price object creating Orders for each instrument.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.TradeData">
             <summary>
             Represents a Trade Data object containing the details of a trade.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.DataType.Transaction">
             <summary>
             Represents a Transaction object with details about an Oanda transaction.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.DataType.Transaction.GetTitle">
             <summary>
             Gets a basic title for the type of transaction
             </summary>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.DataType.Transaction.GetReadableString">
             <summary>
             
             </summary>
             <returns></returns>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.Environment">
             <summary>
             Represents different environments available for the REST API.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Oanda.Environment.Sandbox">
             <summary>
             An environment purely for testing; it is not as fast, stable and reliable as the other environments (i.e. it can go down once in a while). 
             Market data returned from this environment is simulated (not real market data).
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Oanda.Environment.Practice">
             <summary>
             A stable environment; recommended for testing with your fxTrade Practice account and your personal access token.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Oanda.Environment.Trade">
             <summary>
             A stable environment; recommended for production-ready code to execute with your fxTrade account and your personal access token.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.Framework.Common">
             <summary>
             Common reflection helper methods for Oanda data types.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.Framework.EndpointResolver">
             <summary>
             Helper class to resolve the endpoint for the Oanda RESTful call.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.Framework.EndpointResolver.ResolveEndpoint(QuantConnect.Brokerages.Oanda.Environment,QuantConnect.Brokerages.Oanda.Server)">
             <summary>
             Resolves the endpoint.
             </summary>
             <param name="environment">The environment.</param>
             <param name="server">The server.</param>
             <returns></returns>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.OandaBrokerage">
             <summary>
             Oanda Brokerage - implementation of IBrokerage interface
             </summary>
             <summary>
             Oanda Brokerage - implementation of IDataQueueHandler interface
             </summary>
             <summary>
             Oanda Brokerage - implementation of IHistoryProvider interface
             </summary>
             <summary>
             Oanda Brokerage - REST API related functions
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.#ctor(QuantConnect.Securities.IOrderProvider,QuantConnect.Securities.ISecurityProvider,QuantConnect.Brokerages.Oanda.Environment,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.Oanda.OandaBrokerage" /> class.
             </summary>
             <param name="orderProvider">The order provider.</param>
             <param name="securityProvider">The holdings provider.</param>
             <param name="environment">The Oanda environment (Trade or Practice)</param>
             <param name="accessToken">The Oanda access token (can be the user's personal access token or the access token obtained with OAuth by QC on behalf of the user)</param>
             <param name="accountId">The account identifier.</param>
            </member>
        <member name="P:QuantConnect.Brokerages.Oanda.OandaBrokerage.IsConnected">
             <summary>
             Returns true if we're currently connected to the broker
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.Connect">
             <summary>
             Connects the client to the broker's remote servers
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.Disconnect">
             <summary>
             Disconnects the client from the broker's remote servers
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.GetOpenOrders">
             <summary>
             Gets all open orders on the account. 
             NOTE: The order objects returned do not have QC order IDs.
             </summary>
             <returns>The open orders returned from Oanda</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.GetAccountHoldings">
             <summary>
             Gets all holdings for the account
             </summary>
             <returns>The current holdings from the account</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.GetCashBalance">
             <summary>
             Gets the current cash balance for each currency held in the brokerage account
             </summary>
             <returns>The current cash balance for each currency available for trading</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.PlaceOrder(QuantConnect.Orders.Order)">
             <summary>
             Places a new order and assigns a new broker ID to the order
             </summary>
             <param name="order">The order to be placed</param>
             <returns>True if the request for a new order has been placed, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.UpdateOrder(QuantConnect.Orders.Order)">
             <summary>
             Updates the order with the same id
             </summary>
             <param name="order">The new order information</param>
             <returns>True if the request was made for the order to be updated, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.CancelOrder(QuantConnect.Orders.Order)">
             <summary>
             Cancels the order with the specified ID
             </summary>
             <param name="order">The order to cancel</param>
             <returns>True if the request was made for the order to be canceled, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.GetNextTicks">
             <summary>
             Get the next ticks from the live trading data queue
             </summary>
             <returns>IEnumerable list of ticks since the last update.</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.Subscribe(QuantConnect.Packets.LiveNodePacket,System.Collections.Generic.IEnumerable{QuantConnect.Symbol})">
             <summary>
             Adds the specified symbols to the subscription
             </summary>
             <param name="job">Job we're subscribing for:</param>
             <param name="symbols">The symbols to be added keyed by SecurityType</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.Unsubscribe(QuantConnect.Packets.LiveNodePacket,System.Collections.Generic.IEnumerable{QuantConnect.Symbol})">
             <summary>
             Removes the specified symbols from the subscription
             </summary>
             <param name="job">Job we're processing.</param>
             <param name="symbols">The symbols to be removed keyed by SecurityType</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.ProcessSubscriptionRequest">
             <summary>
             Groups multiple subscribe/unsubscribe calls to avoid closing and reopening the streaming session on each call
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.CanSubscribe(QuantConnect.Symbol)">
             <summary>
             Returns true if this brokerage supports the specified symbol
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.SubscribeSymbols(System.Collections.Generic.List{QuantConnect.Symbol})">
             <summary>
             Subscribes to the requested symbols (using a single streaming session)
             </summary>
             <param name="symbolsToSubscribe">The list of symbols to subscribe</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.GetDateTimeFromString(System.String)">
             <summary>
             Returns a DateTime from an RFC3339 string (with microsecond resolution)
             </summary>
             <param name="time">The time string</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.OnDataReceived(QuantConnect.Brokerages.Oanda.DataType.Communications.RateStreamResponse)">
             <summary>
             Event handler for streaming ticks
             </summary>
             <param name="data">The data object containing the received tick</param>
            </member>
        <member name="F:QuantConnect.Brokerages.Oanda.OandaBrokerage.MaxBarsPerRequest">
             <summary>
             The maximum number of bars per historical data request
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Oanda.OandaBrokerage.DataPointCount">
             <summary>
             Gets the total number of data points emitted by this history provider
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.Initialize(QuantConnect.Packets.AlgorithmNodePacket,QuantConnect.Interfaces.IMapFileProvider,QuantConnect.Interfaces.IFactorFileProvider,QuantConnect.Interfaces.IDataFileProvider,System.Action{System.Int32})">
             <summary>
             Initializes this history provider to work for the specified job
             </summary>
             <param name="job">The job</param>
             <param name="mapFileProvider">Provider used to get a map file resolver to handle equity mapping</param>
             <param name="factorFileProvider">Provider used to get factor files to handle equity price scaling</param>
             <param name="dataFileProvider">Provider used to get data when it is not present on disk</param>
             <param name="statusUpdate">Function used to send status updates</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.GetHistory(System.Collections.Generic.IEnumerable{QuantConnect.Data.HistoryRequest},NodaTime.DateTimeZone)">
             <summary>
             Gets the history for the requested securities
             </summary>
             <param name="requests">The historical data requests</param>
             <param name="sliceTimeZone">The time zone used when time stamping the slice instances</param>
             <returns>An enumerable of the slices of data covering the span specified in each request</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.ToGranularity(QuantConnect.Resolution)">
             <summary>
             Converts a LEAN Resolution to an EGranularity
             </summary>
             <param name="resolution">The resolution to convert</param>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.GetInstruments(System.Collections.Generic.List{System.String})">
             <summary>
             Gets the list of available tradable instruments/products from Oanda
             </summary>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.OnEventReceived(QuantConnect.Brokerages.Oanda.DataType.Event)">
             <summary>
             Event handler for streaming events
             </summary>
             <param name="data">The event object</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.UpdateOrder(System.Int64,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
             Modify the specified order, updating it with the parameters provided
             </summary>
             <param name="orderId">the identifier of the order to update</param>
             <param name="requestParams">the parameters to update (name, value pairs)</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.GetRates(System.Collections.Generic.List{System.String})">
             <summary>
             Retrieves the current rate for each of a list of instruments
             </summary>
             <param name="instruments">the list of instruments to check</param>
             <returns>List of Price objects with the current price for each instrument</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.PostOrderAsync(System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
             Posts an order on the given account with the given parameters
             </summary>
             <param name="requestParams">the parameters to use in the request</param>
             <returns>PostOrderResponse with details of the results (throws if if fails)</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.GetOrderList(System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
             Retrieves the list of open orders belonging to the account
             </summary>
             <param name="requestParams">optional additional parameters for the request (name, value pairs)</param>
             <returns>List of Order objects (or empty list, if no orders)</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.StartRatesSession(System.Collections.Generic.List{QuantConnect.Brokerages.Oanda.DataType.Instrument},System.String)">
             <summary>
             Initializes a streaming rates session with the given instruments on the given account
             </summary>
             <param name="instruments">list of instruments to stream rates for</param>
             <param name="accountId">the account ID you want to stream on</param>
             <returns>the WebResponse object that can be used to retrieve the rates as they stream</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.StartEventsSession(System.Collections.Generic.List{System.String})">
             <summary>
             Initializes a streaming events session which will stream events for the given accounts
             </summary>
             <param name="accountId">the account IDs you want to stream on</param>
             <returns>the WebResponse object that can be used to retrieve the events as they stream</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.MakeRequest``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
             Primary (internal) request handler
             </summary>
             <typeparam name="T">The response type</typeparam>
             <param name="requestString">the request to make</param>
             <param name="method">method for the request (defaults to GET)</param>
             <param name="requestParams">optional parameters (note that if provided, it's assumed the requestString doesn't contain any)</param>
             <returns>response via type T</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.MakeRequestWithBody``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
             Secondary (internal) request handler. differs from primary in that parameters are placed in the body instead of the request string
             </summary>
             <typeparam name="T">response type</typeparam>
             <param name="method">method to use (usually POST or PATCH)</param>
             <param name="requestParams">the parameters to pass in the request body</param>
             <param name="requestString">the request to make</param>
             <returns>response, via type T</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.GetPositions(System.String)">
             <summary>
             Retrieves the current non-zero positions for a given account
             </summary>
             <param name="accountId">positions will be retrieved for this account id</param>
             <returns>List of Position objects with the details for each position (or empty list iff no positions)</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.CreateParamString(System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
             Helper function to create the parameter string out of a dictionary of parameters
             </summary>
             <param name="requestParams">the parameters to convert</param>
             <returns>string containing all the parameters for use in requests</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.ConvertOrder(QuantConnect.Brokerages.Oanda.DataType.Order)">
             <summary>
             Converts the specified Oanda order into a qc order.
             The 'task' will have a value if we needed to issue a rest call for the stop price, otherwise it will be null
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.ConvertQuantity(QuantConnect.Brokerages.Oanda.DataType.Order)">
             <summary>
             Converts the Oanda order quantity into a qc quantity
             </summary>
             <remarks>
             Oanda quantities are always positive and use the direction to denote +/-, where as qc
             order quantities determine the direction
             </remarks>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.ConvertHolding(QuantConnect.Brokerages.Oanda.DataType.Position)">
             <summary>
             Converts the Oanda position into a QuantConnect holding.
             </summary>
             <param name="position">The position.</param>
             <returns></returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.GetUsdConversion(System.String)">
             <summary>
             Gets the current conversion rate into USD
             </summary>
             <remarks>Synchronous, blocking</remarks>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.DownloadBars(System.String,System.String,System.Int32,QuantConnect.Brokerages.Oanda.DataType.Communications.Requests.EGranularity)">
             <summary>
             Downloads a list of bars at the requested resolution from a starting datetime
             </summary>
             <param name="oandaSymbol">The Oanda symbol</param>
             <param name="startUtc">The starting time (UTC)</param>
             <param name="barsPerRequest">The number of bars requested (max=5000)</param>
             <param name="granularity">The granularity (Oanda resolution)</param>
             <returns>The list of candles/bars</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerage.GetCandles(QuantConnect.Brokerages.Oanda.DataType.Communications.Requests.CandlesRequest)">
             <summary>
             More detailed request to retrieve candles
             </summary>
             <param name="request">the request data to use when retrieving the candles</param>
             <returns>List of Candles received (or empty list)</returns>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.OandaBrokerageFactory">
             <summary>
             Provides an implementations of <see cref="T:QuantConnect.Interfaces.IBrokerageFactory" /> that produces a <see cref="T:QuantConnect.Brokerages.Oanda.OandaBrokerage" />
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerageFactory.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.Oanda.OandaBrokerageFactory" /> class.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerageFactory.Dispose">
             <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Oanda.OandaBrokerageFactory.BrokerageData">
             <summary>
             Gets the brokerage data required to run the brokerage from configuration/disk
             </summary>
             <remarks>
             The implementation of this property will create the brokerage data dictionary required for
             running live jobs. See <see cref="M:QuantConnect.Interfaces.IJobQueueHandler.NextJob(System.String@)" />
             </remarks>
            </member>
        <member name="P:QuantConnect.Brokerages.Oanda.OandaBrokerageFactory.BrokerageModel">
             <summary>
             Gets a new instance of the <see cref="T:QuantConnect.Brokerages.OandaBrokerageModel" />
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaBrokerageFactory.CreateBrokerage(QuantConnect.Packets.LiveNodePacket,QuantConnect.Interfaces.IAlgorithm)">
             <summary>
             Creates a new <see cref="T:QuantConnect.Interfaces.IBrokerage" /> instance
             </summary>
             <param name="job">The job packet to create the brokerage for</param>
             <param name="algorithm">The algorithm instance</param>
             <returns>A new brokerage instance</returns>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.OandaSymbolMapper">
             <summary>
             Provides the mapping between Lean symbols and Oanda symbols.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Oanda.OandaSymbolMapper.KnownSymbols">
             <summary>
             The list of known Oanda symbols.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Oanda.OandaSymbolMapper.KnownCurrencies">
             <summary>
             The list of known Oanda currencies.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaSymbolMapper.GetBrokerageSymbol(QuantConnect.Symbol)">
             <summary>
             Converts a Lean symbol instance to an Oanda symbol
             </summary>
             <param name="symbol">A Lean symbol instance</param>
             <returns>The Oanda symbol</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaSymbolMapper.GetLeanSymbol(System.String,QuantConnect.SecurityType,System.String,System.DateTime,System.Decimal,QuantConnect.OptionRight)">
             <summary>
             Converts an Oanda symbol to a Lean symbol instance
             </summary>
             <param name="brokerageSymbol">The Oanda symbol</param>
             <param name="securityType">The security type</param>
             <param name="market">The market</param>
             <param name="expirationDate">Expiration date of the security(if applicable)</param>
             <param name="strike">The strike of the security (if applicable)</param>
             <param name="optionRight">The option right of the security (if applicable)</param>
             <returns>A new Lean Symbol instance</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaSymbolMapper.GetBrokerageSecurityType(System.String)">
             <summary>
             Returns the security type for an Oanda symbol
             </summary>
             <param name="brokerageSymbol">The Oanda symbol</param>
             <returns>The security type</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaSymbolMapper.GetLeanSecurityType(System.String)">
             <summary>
             Returns the security type for a Lean symbol
             </summary>
             <param name="leanSymbol">The Lean symbol</param>
             <returns>The security type</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaSymbolMapper.IsKnownBrokerageSymbol(System.String)">
             <summary>
             Checks if the symbol is supported by Oanda
             </summary>
             <param name="brokerageSymbol">The Oanda symbol</param>
             <returns>True if Oanda supports the symbol</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaSymbolMapper.IsKnownLeanSymbol(QuantConnect.Symbol)">
             <summary>
             Checks if the symbol is supported by Oanda
             </summary>
             <param name="symbol">The Lean symbol</param>
             <returns>True if Oanda supports the symbol</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaSymbolMapper.ConvertOandaSymbolToLeanSymbol(System.String)">
             <summary>
             Converts an Oanda symbol to a Lean symbol string
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Oanda.OandaSymbolMapper.ConvertLeanSymbolToOandaSymbol(System.String)">
             <summary>
             Converts a Lean symbol string to an Oanda symbol
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.Server">
             <summary>
             Represents the server instance that we will be performing the RESTful call.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Oanda.Server.Account">
             <summary>
             The account
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Oanda.Server.Rates">
             <summary>
             The rates
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Oanda.Server.StreamingRates">
             <summary>
             The streaming rates
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Oanda.Server.StreamingEvents">
             <summary>
             The streaming events
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.Session.EventsSession">
             <summary>
             Initialise an events sessions for Oanda Brokerage.
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Oanda.Session.StreamSession`1">
             <summary>
             StreamSession abstract class used to model the Oanda Events Sessions.
             </summary>
             <typeparam name="T"></typeparam>
            </member>
        <member name="T:QuantConnect.Brokerages.Paper.PaperBrokerage">
             <summary>
             Paper Trading Brokerage
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Paper.PaperBrokerage.#ctor(QuantConnect.Interfaces.IAlgorithm,QuantConnect.Packets.LiveNodePacket)">
             <summary>
             Creates a new PaperBrokerage
             </summary>
             <param name="algorithm">The algorithm under analysis</param>
             <param name="job">The job packet</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Paper.PaperBrokerage.GetCashBalance">
             <summary>
             Gets the current cash balance for each currency held in the brokerage account
             </summary>
             <returns>The current cash balance for each currency available for trading</returns>
            </member>
        <member name="T:QuantConnect.Brokerages.Paper.PaperBrokerageFactory">
             <summary>
             The factory type for the <see cref="T:QuantConnect.Brokerages.Paper.PaperBrokerage" />
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Paper.PaperBrokerageFactory.BrokerageData">
             <summary>
             Gets the brokerage data required to run the IB brokerage from configuration
             </summary>
             <remarks>
             The implementation of this property will create the brokerage data dictionary required for
             running live jobs. See <see cref="M:QuantConnect.Interfaces.IJobQueueHandler.NextJob(System.String@)" />
             </remarks>
            </member>
        <member name="P:QuantConnect.Brokerages.Paper.PaperBrokerageFactory.BrokerageModel">
             <summary>
             Gets a new instance of the <see cref="T:QuantConnect.Brokerages.InteractiveBrokersBrokerageModel" />
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Paper.PaperBrokerageFactory.CreateBrokerage(QuantConnect.Packets.LiveNodePacket,QuantConnect.Interfaces.IAlgorithm)">
             <summary>
             Creates a new IBrokerage instance
             </summary>
             <param name="job">The job packet to create the brokerage for</param>
             <param name="algorithm">The algorithm instance</param>
             <returns>A new brokerage instance</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Paper.PaperBrokerageFactory.Dispose">
             <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             </summary>
             <filterpriority>2</filterpriority>
            </member>
        <member name="M:QuantConnect.Brokerages.Paper.PaperBrokerageFactory.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:QuantConnect.Brokerages.Paper.PaperBrokerageFactory" /> class
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierBrokerage">
             <summary>
             Tradier Brokerage - IHistoryProvider implementation
             </summary>
             <summary>
             Tradier Class: IDataQueueHandler implementation
             </summary>
             <summary>
             Tradier Class: 
              - Handle authentication.
              - Data requests.
              - Rate limiting.
              - Placing orders.
              - Getting user data.
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerage.DataPointCount">
             <summary>
             Gets the total number of data points emitted by this history provider
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.Initialize(QuantConnect.Packets.AlgorithmNodePacket,QuantConnect.Interfaces.IMapFileProvider,QuantConnect.Interfaces.IFactorFileProvider,QuantConnect.Interfaces.IDataFileProvider,System.Action{System.Int32})">
             <summary>
             Initializes this history provider to work for the specified job
             </summary>
             <param name="job">The job</param>
             <param name="mapFileProvider">Provider used to get a map file resolver to handle equity mapping</param>
             <param name="factorFileProvider">Provider used to get factor files to handle equity price scaling</param>
             <param name="dataFileProvider">Provider used to get data when it is not present on disk</param>
             <param name="statusUpdate">Function used to send status updates</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetHistory(System.Collections.Generic.IEnumerable{QuantConnect.Data.HistoryRequest},NodaTime.DateTimeZone)">
             <summary>
             Gets the history for the requested securities
             </summary>
             <param name="requests">The historical data requests</param>
             <param name="sliceTimeZone">The time zone used when time stamping the slice instances</param>
             <returns>An enumerable of the slices of data covering the span specified in each request</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetNextTicks">
             <summary>
             Get a stream of ticks from the brokerage
             </summary>
             <returns>IEnumerable of BaseData</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.Subscribe(QuantConnect.Packets.LiveNodePacket,System.Collections.Generic.IEnumerable{QuantConnect.Symbol})">
             <summary>
             Subscribe to a specific list of symbols
             </summary>
             <param name="job">Live job to subscribe with</param>
             <param name="symbols">List of symbols to subscribe to</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.Unsubscribe(QuantConnect.Packets.LiveNodePacket,System.Collections.Generic.IEnumerable{QuantConnect.Symbol})">
             <summary>
             Remove the symbol from the subscription list.
             </summary>
             <param name="job">Live Job to subscribe with</param>
             <param name="symbols">List of symbols to unsubscribe from</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.Refresh">
             <summary>
             Refresh the subscriptions list.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetTickers">
             <summary>
             Get a string list of tickers from the symbol dictionary
             </summary>
             <returns>List of string tickers</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.CreateTick(QuantConnect.Brokerages.Tradier.TradierStreamData)">
             <summary>
             Create a tick from the tradier stream data:
             </summary>
             <param name="tsd">Tradier stream data obejct</param>
             <returns>LEAN Tick object</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.CreateStreamSession">
             <summary>
             Get the current market status
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.CloseStream">
             <summary>
             Close the current stream async
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.Stream(System.Collections.Generic.List{System.String})">
             <summary>
             Connect to tradier API strea:
             </summary>
             <param name="symbols">symbol list</param>
             <returns></returns>
            </member>
        <member name="E:QuantConnect.Brokerages.Tradier.TradierBrokerage.SessionRefreshed">
             <summary>
             Event fired when our session has been refreshed/tokens updated
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerage.ExpectedExpiry">
             <summary>
             When we expect this access token to expire, leaves an hour of padding
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerage.AccessToken">
             <summary>
             Access Token Access:
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerage.RefreshToken">
             <summary>
             Refresh Token Access:
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerage.UserId">
             <summary>
             The QC User id, used for refreshing the session
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerage.LastResponse">
             <summary>
             Get the last string returned
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.#ctor(QuantConnect.Securities.IOrderProvider,QuantConnect.Securities.ISecurityProvider,System.String)">
             <summary>
             Create a new Tradier Object:
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.SetTokens(System.Int32,System.String,System.String,System.DateTime,System.TimeSpan)">
             <summary>
             Set the access token and login information for the tradier brokerage 
             </summary>
             <param name="userId">Userid for this brokerage</param>
             <param name="accessToken">Viable access token</param>
             <param name="refreshToken">Our refresh token</param>
             <param name="issuedAt">When the token was issued</param>
             <param name="lifeSpan">Life span for our token.</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.Execute``1(RestSharp.RestRequest,QuantConnect.Brokerages.Tradier.TradierApiRequestType,System.String,System.Int32,System.Int32)">
             <summary>
             Execute a authenticated call:
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.RefreshSession">
             <summary>
             Verify we have a user session; or refresh the access token.
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetUserProfile">
             <summary>
             Using this auth token get the tradier user:
             </summary>
             <remarks>
             Returns null if the request was unsucessful
             </remarks>
             <returns>Tradier user model:</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetBalanceDetails(System.String)">
             <summary>
             Get all the users balance information:
             </summary>
             <remarks>
             Returns null if the request was unsucessful
             </remarks>
             <returns>Balance</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetPositions">
             <summary>
             Get a list of the tradier positions for this account:
             </summary>
             <remarks>
             Returns null if the request was unsucessful
             </remarks>
             <returns>Array of the symbols we hold.</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetAccountEvents(System.Int64)">
             <summary>
             Get a list of historical events for this account:
             </summary>
             <remarks>
             Returns null if the request was unsucessful
             </remarks>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetGainLoss(System.Int64)">
             <summary>
             GainLoss of recent trades for this account:
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetIntradayAndPendingOrders">
             <summary>
             Get Intraday and pending orders for users account: accounts/{account_id}/orders
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetOrder(System.Int64)">
             <summary>
             Get information about a specific order: accounts/{account_id}/orders/{id}
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.PlaceOrder(System.String,QuantConnect.Brokerages.Tradier.TradierOrderClass,QuantConnect.Brokerages.Tradier.TradierOrderDirection,System.String,System.Decimal,System.Decimal,System.Decimal,System.String,QuantConnect.Brokerages.Tradier.TradierOrderType,QuantConnect.Brokerages.Tradier.TradierOrderDuration)">
             <summary>
             Place Order through API.
             accounts/{account-id}/orders
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.ChangeOrder(System.String,System.Int64,QuantConnect.Brokerages.Tradier.TradierOrderType,QuantConnect.Brokerages.Tradier.TradierOrderDuration,System.Decimal,System.Decimal)">
             <summary>
             Update an exiting Tradier Order:
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.CancelOrder(System.String,System.Int64)">
             <summary>
             Cancel the order with this account and id number
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetQuotes(System.Collections.Generic.List{System.String})">
             <summary>
             List of quotes for symbols 
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetTimeSeries(System.String,System.DateTime,System.DateTime,QuantConnect.Brokerages.Tradier.TradierTimeSeriesIntervals)">
             <summary>
             Get the historical bars for this period
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetHistoricalData(System.String,System.DateTime,System.DateTime,QuantConnect.Brokerages.Tradier.TradierHistoricalDataIntervals)">
             <summary>
             Get full daily, weekly or monthly bars of historical periods:
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetMarketStatus">
             <summary>
             Get the current market status
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetMarketCalendar(System.Int32,System.Int32)">
             <summary>
             Get the list of days status for this calendar month, year:
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.Search(System.String,System.Boolean)">
             <summary>
             Get the list of days status for this calendar month, year:
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.LookUpSymbol(System.String,System.Boolean)">
             <summary>
             Get the list of days status for this calendar month, year:
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetEnumDescription(System.Enum)">
             <summary>
             Convert the C# Enums back to the Tradier API Equivalent:
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.DeserializeRemoveRoot``1(System.String,System.String)">
             <summary>
             Get the rype inside the nested root:
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.OnSessionRefreshed(QuantConnect.Brokerages.Tradier.TokenResponse)">
             <summary>
             Event invocator for the SessionRefreshed event
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerage.IsConnected">
             <summary>
             Returns true if we're currently connected to the broker
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetOpenOrders">
             <summary>
             Gets all open orders on the account. 
             NOTE: The order objects returned do not have QC order IDs.
             </summary>
             <returns>The open orders returned from IB</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetAccountHoldings">
             <summary>
             Gets all holdings for the account
             </summary>
             <returns>The current holdings from the account</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetCashBalance">
             <summary>
             Gets the current cash balance for each currency held in the brokerage account
             </summary>
             <returns>The current cash balance for each currency available for trading</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.PlaceOrder(QuantConnect.Orders.Order)">
             <summary>
             Places a new order and assigns a new broker ID to the order
             </summary>
             <param name="order">The order to be placed</param>
             <returns>True if the request for a new order has been placed, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.UpdateOrder(QuantConnect.Orders.Order)">
             <summary>
             Updates the order with the same id
             </summary>
             <param name="order">The new order information</param>
             <returns>True if the request was made for the order to be updated, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.CancelOrder(QuantConnect.Orders.Order)">
             <summary>
             Cancels the order with the specified ID
             </summary>
             <param name="order">The order to cancel</param>
             <returns>True if the request was made for the order to be canceled, false otherwise</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.Connect">
             <summary>
             Connects the client to the broker's remote servers
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.Disconnect">
             <summary>
             Disconnects the client from the broker's remote servers
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.OnMessage(QuantConnect.Brokerages.BrokerageMessageEvent)">
             <summary>
             Event invocator for the Message event
             </summary>
             <param name="e">The error</param>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.CheckForFills">
             <summary>
             Checks for fill events by polling FetchOrders for pending orders and diffing against the last orders seen
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.OrderIsOpen(QuantConnect.Brokerages.Tradier.TradierOrder)">
             <summary>
             Returns true if the specified order is considered open, otherwise false
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.OrderIsClosed(QuantConnect.Brokerages.Tradier.TradierOrder)">
             <summary>
             Returns true if the specified order is considered close, otherwise false
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.IsShort(QuantConnect.Brokerages.Tradier.TradierOrderDirection)">
             <summary>
             Returns true if the specified tradier order direction represents a short position
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.ConvertOrder(QuantConnect.Brokerages.Tradier.TradierOrder)">
             <summary>
             Converts the specified tradier order into a qc order.
             The 'task' will have a value if we needed to issue a rest call for the stop price, otherwise it will be null
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.ConvertOrderType(QuantConnect.Orders.OrderType)">
             <summary>
             Converts the qc order type into a tradier order type
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.ConvertDuration(QuantConnect.Brokerages.Tradier.TradierOrderDuration)">
             <summary>
             Converts the tradier order duration into a qc order duration
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.ConvertStatus(QuantConnect.Brokerages.Tradier.TradierOrderStatus)">
             <summary>
             Converts the tradier order status into a qc order status
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.ConvertStatus(QuantConnect.Orders.OrderStatus)">
             <summary>
             Converts the qc order status into a tradier order status
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.ConvertQuantity(QuantConnect.Brokerages.Tradier.TradierOrder)">
             <summary>
             Converts the tradier order quantity into a qc quantity
             </summary>
             <remarks>
             Tradier quantities are always positive and use the direction to denote +/-, where as qc
             order quantities determine the direction
             </remarks>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.ConvertHolding(QuantConnect.Brokerages.Tradier.TradierPosition)">
             <summary>
             Converts the tradier position into a qc holding
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.ConvertDirection(QuantConnect.Orders.OrderDirection,System.Decimal)">
             <summary>
             Converts the QC order direction to a tradier order direction
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.OrderCrossesZero(QuantConnect.Orders.Order)">
             <summary>
             Determines whether or not the specified order will bring us across the zero line for holdings
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetOrderDuration(QuantConnect.Orders.OrderDuration)">
             <summary>
             Converts the qc order duration into a tradier order duration
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.ConvertOrderType(QuantConnect.Orders.Order)">
             <summary>
             Converts the qc order type into a tradier order type
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetStopPrice(QuantConnect.Orders.Order)">
             <summary>
             Gets the stop price used in API calls with tradier from the specified qc order instance
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.GetLimitPrice(QuantConnect.Orders.Order)">
             <summary>
             Gets the limit price used in API calls with tradier from the specified qc order instance
             </summary>
             <param name="order"></param>
             <returns></returns>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBrokerage.ContingentOrderQueue.QCOrder">
             <summary>
             The original order produced by the algorithm
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBrokerage.ContingentOrderQueue.Contingents">
             <summary>
             A queue of contingent orders to be placed after fills
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerage.ContingentOrderQueue.Next">
             <summary>
             Dequeues the next contingent order, or null if there are none left
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierBalance">
             <summary>
             Inside "Account" User-account balance information.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalance.Balances">
             Balances of the Tradier Account:
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierBalanceDetails">
             <summary>
             Trader Balance Detail:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.AccountNumber">
            Account Number
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.Type">
            Account Type (margin, cash, pdt)
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.CashAvailable">
            The amount of cash that could be withdrawn or invested in new investments, cash that is not required to support existing positions
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.ClosingProfitLoss">
             The ProfitLoss of the current trading day’s closed positions.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.CurrentRequirement">
             The option requirement of current account positions.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.DividendBalance">
             Dividend Balance
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.Equity">
             Equity Value
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.LongLiquidValue">
             Long Liquid Value
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.LongMarketValue">
             Long Market Value
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.MarketValue">
             Market Value
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.NetValue">
             Net Value
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.OpenProfitLoss">
             The Profit Loss of current account positions.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.OptionLongValue">
             The value of long options held in the account.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.OptionRequirement">
             Option Requirement
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.OptionShortValue">
             The value of short options held in the account.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.PendingCash">
             The amount of cash that is being held for open orders.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.PendingOrdersCount">
             The amount of open orders.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.ShortLiquidValue">
            Short Liquid Value
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.ShortMarketValue">
            Short Market Value
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.StockLongValue">
            The value of long stocks held in the account.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.UnclearedFunds">
            The amount of funds that are not currently available for trading.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.UnsettledFunds">
            Cash that is in the account from recent stock or option sales, but has not yet settled; 
            cash from stock sales occurring during the last 3 trading days or from option sales occurring during the previous trading day.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.TotalCash">
            The total amount of cash in the account.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.TotalEquity">
            The total account value.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.CashTypeSettings">
             Settings class for PDT specific accounts:
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.PatternTraderTypeSettings">
             Settings class for PDT specific accounts:
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBalanceDetails.MarginTypeSettings">
             Settings class for margin specific accounts
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierAccountTypeSettings">
             <summary>
             Common Account Settings.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountTypeSettings.FedCall">
            The amount that the account is in deficit for trades that have occurred but not been paid for.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountTypeSettings.MaintenanceCall">
            The amount that the account is under the minimum equity required in the account to support the current holdings.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountTypeSettings.StockBuyingPower">
            The amount of funds available to purchase fully marginable securities.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountTypeSettings.OptionBuyingPower">
            The amount of funds available to purchase non-marginable securities.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountTypeSettings.StockShortValue">
            The value of short stocks held in the account.
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierAccountTypeSettings.#ctor">
            Constructor
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierAccountTypeDayTrader">
             <summary>
             Account Type Day Trader Settings:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountTypeDayTrader.DayTradeBuyingPower">
            The total amount of funds available for the purchase of fully marginable stock during that trading day, a portion of these funds cannot be held overnight.
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierAccountTypeDayTrader.#ctor">
             Constructor
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierAccountTypeMargin">
             <summary>
             Account Type Margin Settings:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountTypeMargin.Sweep">
            "Sweep"
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierAccountTypeMargin.#ctor">
             Constructor
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierAccountTypeCash">
             <summary>
             Account Type Margin Settings:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountTypeCash.Sweep">
            "Sweep"
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountTypeCash.CashAvailable">
            "Cash Available"
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountTypeCash.UnsettledFunds">
            "Unsettled."
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierAccountTypeCash.#ctor">
             Constructor
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierApiRequestType">
             <summary>
             Rate limiting categorization
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierApiRequestType.Standard">
             Standard Rate Limit
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierApiRequestType.Data">
             Data API Rate Limiting
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierApiRequestType.Orders">
             Orders API Rate Limit
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierAccountType">
             <summary>
             Tradier account type:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountType.DayTrader">
             Account Type: Trader
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountType.Cash">
             Account Type: Cash
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountType.Margin">
             Account Type: Margin
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrderDirection">
             <summary>
             Direction of the order
             (buy, buy_to_open, buy_to_cover, buy_to_close, sell, sell_short, sell_to_open, sell_to_close)
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDirection.Buy">
             TradierOrderDirection: Buy          -- Equity -- Open Buy New Position
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDirection.SellShort">
             TradierOrderDirection: Sell Short   -- Equity -- Open New Short Sell 
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDirection.Sell">
             TradierOrderDirection: Sell         -- Equity -- Closing Long Existing Positions
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDirection.BuyToCover">
             TradierOrderDirection: Buy to Cover -- Equity -- Closing a short equity
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDirection.SellToOpen">
             OPTIONS ONLY vvvvvvvvvvvvvvvvvvvvvvv
             TradierOrderDirection: Sell to Open
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDirection.SellToClose">
             TradierOrderDirection: Sell to Close
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDirection.BuyToClose">
             TradierOrderDirection: Buy to Close
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDirection.BuyToOpen">
             TradierOrderDirection: Buy to Open 
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDirection.None">
            Order Fail Case:
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrderStatus">
             <summary>
             Status of the tradier order.
              (filled, canceled, open, expired, rejected, pending, partially_filled, submitted)
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderStatus.Filled">
             TradierOrderStatus: Fill
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderStatus.Canceled">
             TradierOrderStatus: Cancelled
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderStatus.Open">
             TradierOrderStatus: Open
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderStatus.Expired">
             TradierOrderStatus: Expired
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderStatus.Rejected">
             TradierOrderStatus: Rejected
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderStatus.Pending">
             TradierOrderStatus: Pending
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderStatus.PartiallyFilled">
             TradierOrderStatus: Partially Filled
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderStatus.Submitted">
             TradierOrderStatus: Submitted
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrderDuration">
             <summary>
             Length of the order offer.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDuration.GTC">
             TradierOrderDuration: Good to Cancelled
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDuration.Day">
             TradierOrderDuration: Day Period
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrderClass">
             <summary>
             Class of the order.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderClass.Equity">
             TradierOrderClass: Equity
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderClass.Option">
             TradierOrderClass: Option
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderClass.Multileg">
             TradierOrderClass: Multi
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderClass.Combo">
             TradierOrderClass: Combo
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierAccountStatus">
             <summary>
             Account status flag.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountStatus.New">
             TradierAccountStatus: New
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountStatus.Approved">
             TradierAccountStatus: Approved
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountStatus.Closed">
             TradierAccountStatus: Closed
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOptionStatus">
             <summary>
             Tradier options status
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOptionStatus.Exercise">
             TradierOptionStatus: exercise
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOptionStatus.Expired">
             TradierOptionStatus: Expired
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOptionStatus.Assignment">
             TradierOptionStatus: Assignment
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierTimeSeriesIntervals">
             <summary>
             TradeBar windows for Tradier's data histories
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTimeSeriesIntervals.Tick">
             TradierTimeSeriesIntervals: Tick
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTimeSeriesIntervals.OneMinute">
             TradierTimeSeriesIntervals: 1min
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTimeSeriesIntervals.FiveMinutes">
             TradierTimeSeriesIntervals: 5min
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTimeSeriesIntervals.FifteenMinutes">
             TradierTimeSeriesIntervals: 15min
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierHistoricalDataIntervals">
             <summary>
             Historical data intervals for tradier requests:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierHistoricalDataIntervals.Daily">
             TradierTimeSeriesIntervals: Daily
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierHistoricalDataIntervals.Weekly">
             TradierTimeSeriesIntervals: Weekly
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierHistoricalDataIntervals.Monthly">
             TradierTimeSeriesIntervals: Molnthly
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOptionType">
             <summary>
             Tradier option type
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOptionType.Put">
             Option Type
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOptionType.Call">
             Option Type
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOptionExpirationType">
             <summary>
             Tradier options expiration
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOptionExpirationType.Standard">
             Option Expiration std.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOptionExpirationType.Weekly">
             Option Expiration std.
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierAccountClassification">
             <summary>
             Account classification
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountClassification.Individual">
             Account Classification Individual
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountClassification.IRA">
             Account Classification IRA
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountClassification.Roth_Ira">
             Account Classification Roth_Ira
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountClassification.Joint">
             Account Classification Joint
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierAccountClassification.Entity">
             Account Classification Entity
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierEventType">
             <summary>
             Tradier event type:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEventType.Trade">
             Trade Event
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEventType.Journal">
             Journal Event
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEventType.Option">
             Option Event
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEventType.Dividend">
             Dividend Event
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierTradeType">
             <summary>
             Market type of the trade: 
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTradeType.Equity">
             Equity Trade Type
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTradeType.Option">
             Option Trade Type
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrderType">
             <summary>
             Tradier order type: (market, limit, stop, stop_limit or market) //credit, debit, even
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderType.Limit">
             Order Type: Limit
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderType.Market">
             Order Type: Market
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderType.StopLimit">
             Order Type: Stop Limit
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderType.StopMarket">
             Order Type: Stop Market
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderType.Credit">
             Order Type: Credit
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderType.Debit">
             Order Type: Debit
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderType.Even">
             Order Type: Even
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierTimeSeriesContainer">
             <summary>
             Container for timeseries array
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTimeSeriesContainer.TimeSeries">
             Data Time Series
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierTimeSeries">
             <summary>
             One bar of historical Tradier data.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTimeSeries.Time">
             Time of Price Sample
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTimeSeries.Price">
             Tick data requests:
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTimeSeries.Open">
             Bar Requests: Open
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTimeSeries.High">
             Bar Requests: High
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTimeSeries.Low">
             Bar Requests: Low
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTimeSeries.Close">
             Bar Requests: Close
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTimeSeries.Volume">
             Bar Requests: Volume
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierQuoteContainer">
             <summary>
             Container for quotes:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuoteContainer.Quotes">
             Price Quotes:
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierQuote">
             <summary>
             Quote data from Tradier:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Symbol">
             Quote Symbol
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Description">
             Quote Description
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Exchange">
             Quote Exchange
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Type">
             Quote Type
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Last">
             Quote Last Price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Change">
             Quote Change Absolute
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.PercentageChange">
             Quote Change Percentage
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Volume">
             Quote Volume
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.AverageVolume">
             Quote Average Volume
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.LastVolume">
             Quote Last Volume
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.TradeDateUnix">
             Last Trade Date in Unix Time
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Open">
             Open Price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.High">
             High Price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Low">
             Low Price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Close">
             Closng Price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.PreviousClose">
             Previous Close
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Week52High">
             52 W high
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Week52Low">
             52 W Low
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Bid">
             Bid Price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.BidSize">
             Bid Size:
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.BigExchange">
             Bid Exchange
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.BidDateUnix">
             Bid Date Unix
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Ask">
             Asking Price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.AskSize">
             Asking Quantity
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.AskExchange">
             Ask Exchange
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.AskDateUnix">
             Date of Ask
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Options_OpenInterest">
             Open Interest
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Options_UnderlyingAsset">
            Option Underlying Asset
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Options_Strike">
            Option Strike Price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Options_ContractSize">
            Option Constract Size
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Options_ExpirationDate">
            Option Exp Date
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Options_ExpirationType">
            Option Exp Type
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierQuote.Options_OptionType">
             Option Type
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierQuote.#ctor">
             Empty Constructor
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierHistoryDataContainer">
             <summary>
             Container for deserializing history classes
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierHistoryDataContainer.Data">
             Historical Data Contents
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierHistoryBar">
             <summary>
             "Bar" for a history unit.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierHistoryBar.Time">
             Historical Data Bar: Date
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierHistoryBar.Open">
             Historical Data Bar: Open
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierHistoryBar.High">
             Historical Data Bar: High
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierHistoryBar.Low">
             Historical Data Bar: Low
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierHistoryBar.Close">
             Historical Data Bar: Close
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierHistoryBar.Volume">
             Historical Data Bar: Volume
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierMarketStatus">
             <summary>
             Current market status description
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierMarketStatus.Date">
             Market Status: Date
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierMarketStatus.Description">
             Market Status: Description
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierMarketStatus.NextChange">
             Market Status: Next Change in Status
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierMarketStatus.State">
             Market Status: State 
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierMarketStatus.TimeStamp">
             Market Status: Timestamp
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierCalendarStatus">
             <summary>
             Calendar status:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierCalendarStatus.Days">
             Trading Calendar: Day
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierCalendarStatus.Month">
             Trading Calendar: month
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierCalendarStatus.Year">
             Trading Calendar: year
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierCalendarDayContainer">
             <summary>
             Container for the days array:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierCalendarDayContainer.Days">
             Trading Calendar: Days List
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierCalendarDay">
             <summary>
             Single days properties from the calendar:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierCalendarDay.Date">
             Trading Calendar: Day
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierCalendarDay.Status">
             Trading Calendar: Sattus
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierCalendarDay.Description">
             Trading Calendar: Description
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierCalendarDay.Premarket">
             Trading Calendar: Premarket Hours
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierCalendarDay.Open">
             Trading Calendar: Open Hours
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierCalendarDay.Postmarket">
             Trading Calendar: Post Hours
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierCalendarDayMarketHours">
             <summary>
             Start and finish time of market hours for this market.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierCalendarDayMarketHours.Start">
             Trading Calendar: Start Hours
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierCalendarDayMarketHours.End">
             Trading Calendar: End Hours
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierSearchContainer">
             <summary>
             Tradier Search Container for Deserialization:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierSearchContainer.Results">
             Trading Search container
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierSearchResult">
             <summary>
             One search result from API
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierSearchResult.Symbol">
             Trading Search: Symbol
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierSearchResult.Exchange">
             Trading Search: Exch
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierSearchResult.Type">
             Trading Search: Type
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierSearchResult.Description">
             Trading Search: Description
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierStreamSession">
             <summary>
             Create a new stream session
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamSession.SessionId">
             Trading Stream: Session Id 
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamSession.Url">
             Trading Stream: Stream URL
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierStreamData">
             <summary>
             One data packet from a tradier stream:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.Type">
             Trading Stream: Type
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.UnixDate">
             Unix date of the event
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.Symbol">
             Trading Stream: Symbol
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.SummaryOpen">
             Trading Stream: Open
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.SummaryHigh">
             Trading Stream: High
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.SummaryLow">
             Trading Stream: Low
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.SummaryClose">
             Trading Stream: Close
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.BidPrice">
             Trading Stream: Bid Price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.BidSize">
             Trading Stream: BidSize
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.BidExchange">
             Trading Stream: Bid Exhc
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.BidDateUnix">
             Trading Stream: Bid Time
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.TradePrice">
             Trading Stream: Last Price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.TradeSize">
             Trading Stream: Last Size
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.TradeExchange">
             Trading Stream: Last Exh
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.TradeCVol">
             Trading Stream: Last Vol
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.AskPrice">
             Trading Stream: Ask Price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.AskSize">
             Trading Stream: Ask Size
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.AskExchange">
             Trading Stream: Ask Exhc
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierStreamData.AskDateUnix">
             Trading Stream: Ask Date
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierFaultContainer">
             <summary>
             Wrapper container for fault:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierFaultContainer.Fault">
             Inner Fault Object
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierFaultContainer.#ctor">
             Fault Container Constructor:
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierFault">
             <summary>
             Tradier fault object:
             {"fault":{"faultstring":"Access Token expired","detail":{"errorcode":"keymanagement.service.access_token_expired"}}}
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierFault.Description">
             Description of fault
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierFault.Details">
             Detail object for fault exception
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierFault.#ctor">
             Tradier Fault Constructor:
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierFaultDetail">
             <summary>
             Error code associated with this fault.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierFaultDetail.ErrorCode">
             Error code for fault
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierFaultDetail.#ctor">
             Tradier Detail Fault Constructor
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierGainLossContainer">
             <summary>
             Gain loss parent class for deserialization
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierGainLossContainer.GainLossClosed">
             Profit Loss
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierGainLossContainer.#ctor">
             Null Constructor
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierGainLossClosed">
             <summary>
             Gain loss class
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierGainLossClosed.ClosedPositions">
             Array of user account details:
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierGainLoss">
             <summary>
             Account only settings for a tradier user:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierGainLoss.CloseDate">
             Date the position was closed.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierGainLoss.OpenDate">
             Date the position was opened
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierGainLoss.Cost">
             Total cost of the order.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierGainLoss.GainLoss">
             Gain or loss on the position.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierGainLoss.GainLossPercentage">
             Percentage of gain or loss on the position.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierGainLoss.Proceeds">
             Total amount received for the order.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierGainLoss.Quantity">
             Number of shares/contracts
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierGainLoss.Symbol">
             Symbol
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierGainLoss.Term">
             Number of shares/contracts
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierGainLoss.#ctor">
             <summary>
             Closed position trade summary
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierEventContainer">
             <summary>
             Tradier deserialization container for history
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEventContainer.TradierEvents">
             Event Contents:
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierEventContainer.#ctor">
             Default constructor for json serialization
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierEvents">
             <summary>
             Events array container.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEvents.Events">
             Events List:
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierEvents.#ctor">
             Default Constructor for JSON
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierEvent">
             <summary>
             Tradier event model:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEvent.Amount">
             Tradier Event: Amount
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEvent.Date">
             Tradier Event: Date
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEvent.Type">
             Tradier Event: Type
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEvent.TradeEvent">
             Tradier Event: TradeEvent
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEvent.JournalEvent">
             Tradier Event: Journal Event
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEvent.OptionEvent">
             Tradier Event: Option Event
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEvent.DividendEvent">
             Tradier Event: Dividend Event
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierEventDetail">
             <summary>
             Common base class for events detail information:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEventDetail.Description">
             Tradier Event: Description
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierEventDetail.Quantity">
             Tradier Event: Quantity
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierEventDetail.#ctor">
             Empty Constructor
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierTradeEvent">
             <summary>
             Trade event in history for tradier:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTradeEvent.Commission">
             Tradier Event: Comission
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTradeEvent.Price">
             Tradier Event: Price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTradeEvent.Symbol">
             Tradier Event: Symbol
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierTradeEvent.TradeType">
             Tradier Event: Trade Type
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierTradeEvent.#ctor">
             Empty constructor
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierJournalEvent">
             <summary>
             Journal event in history:
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierJournalEvent.#ctor">
            
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierDividendEvent">
             <summary>
             Dividend event in history:
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierDividendEvent.#ctor">
            
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOptionEvent">
             <summary>
             Option event record in history:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOptionEvent.Type">
            
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierOptionEvent.#ctor">
            
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrdersContainer">
             <summary>
             Order parent class for deserialization
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrdersContainer.Orders">
             Orders Contents:
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierOrdersContainer.#ctor">
             Constructor: Orders parent:
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrders">
             <summary>
             Order container class
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrders.Orders">
             Array of user account details:
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierOrders.#ctor">
             Null Constructor:
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrder">
             <summary>
             Intraday or pending order for user
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.Id">
             Unique order id.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.Type">
             Market, Limit Order etc.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.Symbol">
             Symbol
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.Direction">
            Long short.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.Quantity">
             Quantity
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.Status">
             Status of the order (filled, canceled, open, expired, rejected, pending, partially_filled, submitted).
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.Duration">
             Duration of the order (day, gtc)
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.Price">
             Percentage of gain or loss on the position.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.AverageFillPrice">
             Average fill price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.QuantityExecuted">
             Quantity executed
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.LastFillPrice">
             Last fill price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.LastFillQuantity">
             Last amount filled
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.RemainingQuantity">
             Quantity Remaining in Order.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.CreatedDate">
             Date order was created.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.TransactionDate">
             Date order was created.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.Class">
            Classification of order (equity, option, multileg, combo)
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.NumberOfLegs">
            The number of legs
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrder.Legs">
             Numberof legs in order
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierOrder.#ctor">
             Closed position trade summary
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrderDetailedContainer">
             <summary>
             Detailed order parent class
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDetailedContainer.DetailedOrder">
             Details of the order
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrderResponse">
             <summary>
             Deserialization wrapper for order response:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderResponse.Order">
             Tradier Order information
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderResponse.Errors">
             Errors in request
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrderResponseError">
             <summary>
             Errors result from an order request.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderResponseError.Errors">
             List of errors
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrderResponseOrder">
             <summary>
             Order response when purchasing equity.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderResponseOrder.Id">
             id or order response
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderResponseOrder.PartnerId">
             Partner id - me
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderResponseOrder.Status">
             Status of order
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrderDetailed">
             <summary>
             Detailed order type.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDetailed.Exchange">
             Order exchange
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDetailed.ExecutionExchange">
             Executed Exchange
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDetailed.OptionType">
             Option type
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDetailed.OptionExpirationDate">
             Expiration date
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderDetailed.StopPrice">
             Stop Price
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierOrderLeg">
             <summary>
             Leg of a tradier order:
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.Type">
             Date order was created.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.Symbol">
             Symbol
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.Direction">
            Long short.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.Quantity">
             Quantity
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.Status">
             Status of the order (filled, canceled, open, expired, rejected, pending, partially_filled, submitted).
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.Duration">
             Duration of the order (day, gtc)
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.Price">
             Percentage of gain or loss on the position.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.AverageFillPrice">
             Average fill price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.QuantityExecuted">
             Quantity executed
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.LastFillPrice">
             Last fill price
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.LastFillQuantity">
             Last amount filled
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.RemainingQuantity">
             Quantity Remaining in Order.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.CreatedDate">
             Date order was created.
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierOrderLeg.TransacionDate">
             Date order was created.
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierOrderLeg.#ctor">
             Constructor
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierPositionsContainer">
             <summary>
             Empty class for deserializing positions held.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierPositionsContainer.TradierPositions">
             Positions Class
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierPositionsContainer.#ctor">
             Default Constructor:
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierPositions">
             <summary>
             Position array container.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierPositions.Positions">
             Positions Class List
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierPositions.#ctor">
             Default Constructor for JSON
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierPosition">
             <summary>
             Individual Tradier position model.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierPosition.Id">
             Position Id
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierPosition.DateAcquired">
             Postion Date Acquired,
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierPosition.Quantity">
             Position Quantity
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierPosition.CostBasis">
             Position Cost:
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierPosition.Symbol">
            Position Symbol
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TokenResponse">
             <summary>
             Token response model from QuantConnect terminal
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TokenResponse.AccessToken">
             Access token for current requests:
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TokenResponse.RefreshToken">
             Refersh token for next time
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TokenResponse.ExpiresIn">
             Seconds the tokens expires
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TokenResponse.Scope">
             Scope of token access
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TokenResponse.IssuedAt">
             Time the token was issued:
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TokenResponse.Success">
             Success flag:
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TokenResponse.#ctor">
             <summary>
              Default constructor:
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory">
             <summary>
             Provides an implementations of IBrokerageFactory that produces a TradierBrokerage
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.Configuration">
             <summary>
             Gets tradier values from configuration
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.Configuration.QuantConnectUserID">
             <summary>
             Gets the account ID to be used when instantiating a brokerage
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.Configuration.AccountID">
             <summary>
             Gets the account ID to be used when instantiating a brokerage
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.Configuration.AccessToken">
             <summary>
             Gets the access token from configuration
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.Configuration.RefreshToken">
             <summary>
             Gets the refresh token from configuration
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.Configuration.TokensIssuedAt">
             <summary>
             Gets the date time the tokens were issued at from configuration
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.Configuration.LifeSpan">
             <summary>
             Gets the life span of the tokens from configuration
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.TokensFile">
             <summary>
             File path used to store tradier token data
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.#ctor">
             <summary>
             Initializes a new instance of he TradierBrokerageFactory class
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.BrokerageData">
             <summary>
             Gets the brokerage data required to run the brokerage from configuration/disk
             </summary>
             <remarks>
             The implementation of this property will create the brokerage data dictionary required for
             running live jobs. See <see cref="M:QuantConnect.Interfaces.IJobQueueHandler.NextJob(System.String@)" />
             </remarks>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.BrokerageModel">
             <summary>
             Gets a new instance of the <see cref="T:QuantConnect.Brokerages.TradierBrokerageModel" />
             </summary>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.CreateBrokerage(QuantConnect.Packets.LiveNodePacket,QuantConnect.Interfaces.IAlgorithm)">
             <summary>
             Creates a new IBrokerage instance
             </summary>
             <param name="job">The job packet to create the brokerage for</param>
             <param name="algorithm">The algorithm instance</param>
             <returns>A new brokerage instance</returns>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.Dispose">
             <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             </summary>
             <filterpriority>2</filterpriority>
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.GetTokens">
             <summary>
             Reads the tradier tokens from the <see cref="F:QuantConnect.Brokerages.Tradier.TradierBrokerageFactory.TokensFile" /> or from configuration
             </summary>
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierUserContainer">
             <summary>
             Model for a TradierUser returned from the API.
             </summary>
            </member>
        <member name="F:QuantConnect.Brokerages.Tradier.TradierUserContainer.Profile">
             User Profile Contents
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierUserContainer.#ctor">
             Constructor: Create user from tradier data.
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierUser">
             <summary>
             User profile array:
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierUser.Id">
             Unique brokerage user id.
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierUser.Name">
             Name of user:
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierUser.Accounts">
             Array of user account details:
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierUser.#ctor">
             Empty Constructor
            </member>
        <member name="T:QuantConnect.Brokerages.Tradier.TradierUserAccount">
             <summary>
             Account only settings for a tradier user:
             </summary>
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierUserAccount.AccountNumber">
             Users account number
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierUserAccount.DayTrader">
             Pattern Trader:
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierUserAccount.OptionLevel">
             Options level permissions on account.
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierUserAccount.Type">
             Cash or Margin Account:
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierUserAccount.LastUpdated">
             Date time of the last update:
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierUserAccount.Status">
             Status of the users account:
            </member>
        <member name="P:QuantConnect.Brokerages.Tradier.TradierUserAccount.Classification">
             Type of user account
            </member>
        <member name="M:QuantConnect.Brokerages.Tradier.TradierUserAccount.#ctor">
             <summary>
             Create a new account:
             </summary>
            </member>
    </members>
</doc>
